{"version":3,"sources":["user.server.model.js"],"names":[],"mappings":";;;;;;AAAA,IAAI,WAAW,QAAQ,UAAR,CAAf;AAAA,IACI,SAAS,SAAS,MADtB;AAEA,IAAI,aAAa,IAAI,MAAJ;AACb,eAAW,MADE;AAEb,cAAU,MAFG;AAGb,WAAO,MAHM;AAIb,cAAU;AACN,cAAM,MADA;AAEN,cAAM,IAFA;AAGN,gBAAQ,IAHF;AAIN,kBAAU;AAJJ,KAJG;AAUb,cAAU;AACN,cAAM,MADA;AAEN,kBAAU,CACN,UAAU,QAAV,EAAoB;AAChB,mBAAO,SAAS,MAAT,IAAmB,CAA1B;AACH,SAHK,EAIN,2BAJM;AAFJ,KAVG;AAmBb,aAAS;AACL,cAAM,IADD;AAEL,iBAAS,KAAK;AAFT,KAnBI;AAuBb,aAAS;AACL,cAAM,MADD;AAEL,aAAK,aAAU,GAAV,EAAe;AAChB,gBAAI,CAAC,GAAL,EAAU;AACN,uBAAO,GAAP;AACH,aAFD,MAEO;AACH,oBAAI,IAAI,OAAJ,CAAY,SAAZ,MAA2B,CAA3B,IAAgC,IAAI,OAAJ,CAAY,UAAZ,MAA4B,CAAhE,EAAmE;AAC/D,0BAAM,YAAY,GAAlB;AACH;AACD,uBAAO,GAAP;AACH;AACJ;AAXI;;AAvBI,kCAqCN;AACH,UAAM,MADH;AAEH,WAAO,IAFJ;AAGH,WAAO;AAHJ,CArCM,iCA0CP;AACF,UAAM,MADJ;AAEF,UAAM,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB;AAFJ,CA1CO,SAAjB;;AAgDA,WAAW,OAAX,CAAmB,UAAnB,EAA+B,GAA/B,CAAmC,YAAY;AAC3C,WAAO,KAAK,SAAL,GAAiB,GAAjB,GAAuB,KAAK,QAAnC;AACH,CAFD,EAEG,GAFH,CAEO,UAAU,QAAV,EAAoB;AACvB,QAAI,YAAY,SAAS,KAAT,CAAe,GAAf,CAAhB;AACA,SAAK,SAAL,GAAiB,UAAU,CAAV,KAAgB,EAAjC;AACA,SAAK,QAAL,GAAgB,UAAU,CAAV,KAAgB,EAAhC;AACH,CAND;;AAQA,WAAW,OAAX,CAAmB,iBAAnB,GAAuC,UAAU,QAAV,EACnC,QADmC,EACzB;AACV,SAAK,OAAL,CAAa,EAAE,UAAU,IAAI,MAAJ,CAAW,QAAX,EAAqB,GAArB,CAAZ,EAAb,EAAsD,QAAtD;AACH,CAHD;;AAKA,WAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,QAAV,EAAoB;AAClD,WAAO,KAAK,QAAL,KAAkB,QAAzB;AACH,CAFD;;AAIA,WAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,QAAV,EAAoB;AAClD,WAAO,KAAK,QAAL,KAAkB,QAAzB;AACH,CAFD;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,GAAX,CAAe,QAAf,EAAyB,EAAE,SAAS,IAAX,EAAiB,UAAU,IAA3B,EAAzB;;AAEA,SAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB;;AAEA,IAAI,aAAa,IAAI,MAAJ,CAAW;AACxB,WAAO;AACH,cAAM,MADH;AAEH,kBAAU;AAFP,KADiB;AAKxB,aAAS;AACL,cAAM,MADD;AAEL,kBAAU;AAFL,KALe;AASxB,YAAQ;AACJ,cAAM,OAAO,QADT;AAEJ,aAAK;AAFD;AATgB,CAAX,CAAjB;;AAeA,SAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB","file":"user.server.model-compiled.js","sourcesContent":["var mongoose = require('mongoose'),\n    Schema = mongoose.Schema;\nvar UserSchema = new Schema({\n    firstName: String,\n    lastName: String,\n    email: String,\n    username: {\n        type: String,\n        trim: true,\n        unique: true,\n        required: true\n    },\n    password: {\n        type: String,\n        validate: [\n            function (password) {\n                return password.length >= 6;\n            },\n            'Password should be longer'\n        ]\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    website: {\n        type: String,\n        get: function (url) {\n            if (!url) {\n                return url;\n            } else {\n                if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {\n                    url = 'http://' + url;\n                }\n                return url;\n            }\n        }\n    },\n\n    email: {\n        type: String,\n        index: true,\n        match: /.+\\@.+\\..+/\n    },\n    role: {\n        type: String,\n        enum: ['Admin', 'Owner', 'User']\n    }\n});\n\nUserSchema.virtual('fullName').get(function () {\n    return this.firstName + ' ' + this.lastName;\n}).set(function (fullName) {\n    var splitName = fullName.split(' ');\n    this.firstName = splitName[0] || '';\n    this.lastName = splitName[1] || '';\n});\n\nUserSchema.statics.findOneByUsername = function (username,\n    callback) {\n    this.findOne({ username: new RegExp(username, 'i') }, callback);\n};\n\nUserSchema.methods.authenticate = function (password) {\n    return this.password === password;\n};\n\nUserSchema.methods.authenticate = function (password) {\n    return this.password === password;\n};\n\n// UserSchema.pre('save', function (next) {\n//     if (...) {\n//     next()\n// } else {\n//     next(new Error('An Error Occured'));\n// }\n// });\n\n// UserSchema.post('save', function (next) {\n//     if (this.isNew) {\n//         console.log('A new user was created.');\n//     } else {\n//         console.log('A user updated is details.');\n//     }\n// });\n\nUserSchema.set('toJSON', { getters: true, virtuals: true });\n\nmongoose.model('User', UserSchema);\n\nvar PostSchema = new Schema({\n    title: {\n        type: String,\n        required: true\n    },\n    content: {\n        type: String,\n        required: true\n    },\n    author: {\n        type: Schema.ObjectId,\n        ref: 'User'\n    }\n});\n\nmongoose.model('Post', PostSchema);"]}
{"version":3,"sources":["luaparse.js"],"names":[],"mappings":"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","file":"luaparse-compiled.js","sourcesContent":["define(function(require, exports, module) {\n/*global exports:true module:true require:true define:true global:true */\n\n(function (root, name, factory) {\n   factory(exports)\n}(this, 'luaparse', function (exports) {\n  'use strict';\n\n  exports.version = '0.1.4';\n\n  var input, options, length;\n\n  // Options can be set either globally on the parser object through\n  // defaultOptions, or during the parse call.\n  var defaultOptions = exports.defaultOptions = {\n    // Explicitly tell the parser when the input ends.\n      wait: false\n    // Store comments as an array in the chunk object.\n    , comments: true\n    // Track identifier scopes by adding an isLocal attribute to each\n    // identifier-node.\n    , scope: false\n    // Store location information on each syntax node as\n    // `loc: { start: { line, column }, end: { line, column } }`.\n    , locations: false\n    // Store the start and end character locations on each syntax node as\n    // `range: [start, end]`.\n    , ranges: false\n  };\n\n  // The available tokens expressed as enum flags so they can be checked with\n  // bitwise operations.\n\n  var EOF = 1, StringLiteral = 2, Keyword = 4, Identifier = 8\n    , NumericLiteral = 16, Punctuator = 32, BooleanLiteral = 64\n    , NilLiteral = 128, VarargLiteral = 256;\n\n  exports.tokenTypes = { EOF: EOF, StringLiteral: StringLiteral\n    , Keyword: Keyword, Identifier: Identifier, NumericLiteral: NumericLiteral\n    , Punctuator: Punctuator, BooleanLiteral: BooleanLiteral\n    , NilLiteral: NilLiteral, VarargLiteral: VarargLiteral\n  };\n\n  // As this parser is a bit different from luas own, the error messages\n  // will be different in some situations.\n\n  var errors = exports.errors = {\n      unexpected: 'Unexpected %1 \\'%2\\' near \\'%3\\''\n    , expected: '\\'%1\\' expected near \\'%2\\''\n    , expectedToken: '%1 expected near \\'%2\\''\n    , unfinishedString: 'unfinished string near \\'%1\\''\n    , malformedNumber: 'malformed number near \\'%1\\''\n  };\n\n  // ### Abstract Syntax Tree\n  //\n  // The default AST structure is inspired by the Mozilla Parser API but can\n  // easily be customized by overriding these functions.\n\n  var ast = exports.ast = {\n      labelStatement: function(label) {\n      return {\n          type: 'LabelStatement'\n        , label: label\n      };\n    }\n\n    , breakStatement: function() {\n      return {\n          type: 'BreakStatement'\n      };\n    }\n\n    , gotoStatement: function(label) {\n      return {\n          type: 'GotoStatement'\n        , label: label\n      };\n    }\n\n    , returnStatement: function(args) {\n      return {\n          type: 'ReturnStatement'\n        , 'arguments': args\n      };\n    }\n\n    , ifStatement: function(clauses) {\n      return {\n          type: 'IfStatement'\n        , clauses: clauses\n      };\n    }\n    , ifClause: function(condition, body) {\n      return {\n          type: 'IfClause'\n        , condition: condition\n        , body: body\n      };\n    }\n    , elseifClause: function(condition, body) {\n      return {\n          type: 'ElseifClause'\n        , condition: condition\n        , body: body\n      };\n    }\n    , elseClause: function(body) {\n      return {\n          type: 'ElseClause'\n        , body: body\n      };\n    }\n\n    , whileStatement: function(condition, body) {\n      return {\n          type: 'WhileStatement'\n        , condition: condition\n        , body: body\n      };\n    }\n\n    , doStatement: function(body) {\n      return {\n          type: 'DoStatement'\n        , body: body\n      };\n    }\n\n    , repeatStatement: function(condition, body) {\n      return {\n          type: 'RepeatStatement'\n        , condition: condition\n        , body: body\n      };\n    }\n\n    , localStatement: function(variables, init) {\n      return {\n          type: 'LocalStatement'\n        , variables: variables\n        , init: init\n      };\n    }\n\n    , assignmentStatement: function(variables, init) {\n      return {\n          type: 'AssignmentStatement'\n        , variables: variables\n        , init: init\n      };\n    }\n\n    , callStatement: function(expression) {\n      return {\n          type: 'CallStatement'\n        , expression: expression\n      };\n    }\n\n    , functionStatement: function(identifier, parameters, isLocal, body) {\n      return {\n          type: 'FunctionDeclaration'\n        , identifier: identifier\n        , isLocal: isLocal\n        , parameters: parameters\n        , body: body\n      };\n    }\n\n    , forNumericStatement: function(variable, start, end, step, body) {\n      return {\n          type: 'ForNumericStatement'\n        , variable: variable\n        , start: start\n        , end: end\n        , step: step\n        , body: body\n      };\n    }\n\n    , forGenericStatement: function(variables, iterators, body) {\n      return {\n          type: 'ForGenericStatement'\n        , variables: variables\n        , iterators: iterators\n        , body: body\n      };\n    }\n\n    , chunk: function(body) {\n      return {\n          type: 'Chunk'\n        , body: body\n      };\n    }\n\n    , identifier: function(name) {\n      return {\n          type: 'Identifier'\n        , name: name\n      };\n    }\n\n    , literal: function(type, value, raw) {\n      type = (type === StringLiteral) ? 'StringLiteral'\n        : (type === NumericLiteral) ? 'NumericLiteral'\n        : (type === BooleanLiteral) ? 'BooleanLiteral'\n        : (type === NilLiteral) ? 'NilLiteral'\n        : 'VarargLiteral';\n\n      return {\n          type: type\n        , value: value\n        , raw: raw\n      };\n    }\n\n    , tableKey: function(key, value) {\n      return {\n          type: 'TableKey'\n        , key: key\n        , value: value\n      };\n    }\n    , tableKeyString: function(key, value) {\n      return {\n          type: 'TableKeyString'\n        , key: key\n        , value: value\n      };\n    }\n    , tableValue: function(value) {\n      return {\n          type: 'TableValue'\n        , value: value\n      };\n    }\n\n\n    , tableConstructorExpression: function(fields) {\n      return {\n          type: 'TableConstructorExpression'\n        , fields: fields\n      };\n    }\n    , binaryExpression: function(operator, left, right) {\n      var type = ('and' === operator || 'or' === operator) ?\n        'LogicalExpression' :\n        'BinaryExpression';\n\n      return {\n          type: type\n        , operator: operator\n        , left: left\n        , right: right\n      };\n    }\n    , unaryExpression: function(operator, argument) {\n      return {\n          type: 'UnaryExpression'\n        , operator: operator\n        , argument: argument\n      };\n    }\n    , memberExpression: function(base, indexer, identifier) {\n      return {\n          type: 'MemberExpression'\n        , indexer: indexer\n        , identifier: identifier\n        , base: base\n      };\n    }\n\n    , indexExpression: function(base, index) {\n      return {\n          type: 'IndexExpression'\n        , base: base\n        , index: index\n      };\n    }\n\n    , callExpression: function(base, args) {\n      return {\n          type: 'CallExpression'\n        , base: base\n        , 'arguments': args\n      };\n    }\n\n    , tableCallExpression: function(base, args) {\n      return {\n          type: 'TableCallExpression'\n        , base: base\n        , 'arguments': args\n      };\n    }\n\n    , stringCallExpression: function(base, argument) {\n      return {\n          type: 'StringCallExpression'\n        , base: base\n        , argument: argument\n      };\n    }\n\n    , comment: function(value, raw) {\n      return {\n          type: 'Comment'\n        , value: value\n        , raw: raw\n      };\n    }\n  };\n\n  // Wrap up the node object.\n\n  function finishNode(node) {\n    // Pop a `Marker` off the location-array and attach its location data.\n    if (trackLocations) {\n      var location = locations.pop();\n      location.complete();\n      if (options.locations) node.loc = location.loc;\n      if (options.ranges) node.range = location.range;\n    }\n    return node;\n  }\n\n\n\n  // Helpers\n  // -------\n\n  var slice = Array.prototype.slice\n    , toString = Object.prototype.toString\n    , indexOf = function indexOf(array, element) {\n      for (var i = 0, length = array.length; i < length; i++) {\n        if (array[i] === element) return i;\n      }\n      return -1;\n    };\n\n  // Iterate through an array of objects and return the index of an object\n  // with a matching property.\n\n  function indexOfObject(array, property, element) {\n    for (var i = 0, length = array.length; i < length; i++) {\n      if (array[i][property] === element) return i;\n    }\n    return -1;\n  }\n\n  // A sprintf implementation using %index (beginning at 1) to input\n  // arguments in the format string.\n  //\n  // Example:\n  //\n  //     // Unexpected function in token\n  //     sprintf('Unexpected %2 in %1.', 'token', 'function');\n\n  function sprintf(format) {\n    var args = slice.call(arguments, 1);\n    format = format.replace(/%(\\d)/g, function (match, index) {\n      return '' + args[index - 1] || '';\n    });\n    return format;\n  }\n\n  // Returns a new object with the properties from all objectes passed as\n  // arguments. Last argument takes precedence.\n  //\n  // Example:\n  //\n  //     this.options = extend(options, { output: false });\n\n  function extend() {\n    var args = slice.call(arguments)\n      , dest = {}\n      , src, prop;\n\n    for (var i = 0, length = args.length; i < length; i++) {\n      src = args[i];\n      for (prop in src) if (src.hasOwnProperty(prop)) {\n        dest[prop] = src[prop];\n      }\n    }\n    return dest;\n  }\n\n  // ### Error functions\n\n  // #### Raise an exception.\n  //\n  // Raise an exception by passing a token, a string format and its paramters.\n  //\n  // The passed tokens location will automatically be added to the error\n  // message if it exists, if not it will default to the lexers current\n  // position.\n  //\n  // Example:\n  //\n  //     // [1:0] expected [ near (\n  //     raise(token, \"expected %1 near %2\", '[', token.value);\n\n  function raise(token) {\n    var message = sprintf.apply(null, slice.call(arguments, 1))\n      , error, col;\n\n    if ('undefined' !== typeof token.line) {\n      col = token.range[0] - token.lineStart;\n      error = new SyntaxError(sprintf('[%1:%2] %3', token.line, col, message));\n      error.line = token.line;\n      error.index = token.range[0];\n      error.column = col;\n    } else {\n      col = index - lineStart + 1;\n      error = new SyntaxError(sprintf('[%1:%2] %3', line, col, message));\n      error.index = index;\n      error.line = line;\n      error.column = col;\n    }\n    throw error;\n  }\n\n  // #### Raise an unexpected token error.\n  //\n  // Example:\n  //\n  //     // expected <name> near '0'\n  //     raiseUnexpectedToken('<name>', token);\n\n  function raiseUnexpectedToken(type, token) {\n    raise(token, errors.expectedToken, type, token.value);\n  }\n\n  // #### Raise a general unexpected error\n  //\n  // Usage should pass either a token object or a symbol string which was\n  // expected. We can also specify a nearby token such as <eof>, this will\n  // default to the currently active token.\n  //\n  // Example:\n  //\n  //     // Unexpected symbol 'end' near '<eof>'\n  //     unexpected(token);\n  //\n  // If there's no token in the buffer it means we have reached <eof>.\n\n  function unexpected(found, near) {\n    if ('undefined' === typeof near) near = lookahead.value;\n    if ('undefined' !== typeof found.type) {\n      var type;\n      switch (found.type) {\n        case StringLiteral:   type = 'string';      break;\n        case Keyword:         type = 'keyword';     break;\n        case Identifier:      type = 'identifier';  break;\n        case NumericLiteral:  type = 'number';      break;\n        case Punctuator:      type = 'symbol';      break;\n        case BooleanLiteral:  type = 'boolean';     break;\n        case NilLiteral:\n          return raise(found, errors.unexpected, 'symbol', 'nil', near);\n      }\n      return raise(found, errors.unexpected, type, found.value, near);\n    }\n    return raise(found, errors.unexpected, 'symbol', found, near);\n  }\n\n  // Lexer\n  // -----\n  //\n  // The lexer, or the tokenizer reads the input string character by character\n  // and derives a token left-right. To be as efficient as possible the lexer\n  // prioritizes the common cases such as identifiers. It also works with\n  // character codes instead of characters as string comparisons was the\n  // biggest bottleneck of the parser.\n  //\n  // If `options.comments` is enabled, all comments encountered will be stored\n  // in an array which later will be appended to the chunk object. If disabled,\n  // they will simply be disregarded.\n  //\n  // When the lexer has derived a valid token, it will be returned as an object\n  // containing its value and as well as its position in the input string (this\n  // is always enabled to provide proper debug messages).\n  //\n  // `lex()` starts lexing and returns the following token in the stream.\n\n  var index\n    , token\n    , previousToken\n    , lookahead\n    , comments\n    , tokenStart\n    , line\n    , lineStart;\n\n  exports.lex = lex;\n\n  function lex() {\n    skipWhiteSpace();\n\n    // Skip comments beginning with --\n    while (45 === input.charCodeAt(index) &&\n           45 === input.charCodeAt(index + 1)) {\n      scanComment();\n      skipWhiteSpace();\n    }\n    if (index >= length) return {\n        type : EOF\n      , value: '<eof>'\n      , line: line\n      , lineStart: lineStart\n      , range: [index, index]\n    };\n\n    var charCode = input.charCodeAt(index)\n      , next = input.charCodeAt(index + 1);\n\n    // Memorize the range index where the token begins.\n    tokenStart = index;\n    if (isIdentifierStart(charCode)) return scanIdentifierOrKeyword();\n\n    switch (charCode) {\n      case 39: case 34: // '\"\n        return scanStringLiteral();\n\n      // 0-9\n      case 48: case 49: case 50: case 51: case 52: case 53:\n      case 54: case 55: case 56: case 57:\n        return scanNumericLiteral();\n\n      case 46: // .\n        // If the dot is followed by a digit it's a float.\n        if (isDecDigit(next)) return scanNumericLiteral();\n        if (46 === next) {\n          if (46 === input.charCodeAt(index + 2)) return scanVarargLiteral();\n          return scanPunctuator('..');\n        }\n        return scanPunctuator('.');\n\n      case 61: // =\n        if (61 === next) return scanPunctuator('==');\n        return scanPunctuator('=');\n\n      case 62: // >\n        if (61 === next) return scanPunctuator('>=');\n        return scanPunctuator('>');\n\n      case 60: // <\n        if (61 === next) return scanPunctuator('<=');\n        return scanPunctuator('<');\n\n      case 126: // ~\n        if (61 === next) return scanPunctuator('~=');\n        return scanPunctuator('~');\n\n      case 58: // :\n        if (58 === next) return scanPunctuator('::');\n        return scanPunctuator(':');\n\n      case 91: // [\n        // Check for a multiline string, they begin with [= or [[\n        if (91 === next || 61 === next) return scanLongStringLiteral();\n        return scanPunctuator('[');\n\n      // \\* / ^ % , { } ] ( ) ; # - +\n      case 42: case 47: case 94: case 37: case 44: case 123: case 125:\n      case 93: case 40: case 41: case 59: case 35: case 45: case 43:\n        return scanPunctuator(input.charAt(index));\n    }\n\n    return unexpected(input.charAt(index));\n  }\n\n  // Whitespace has no semantic meaning in lua so simply skip ahead while\n  // tracking the encounted newlines. Newlines are also tracked in all\n  // token functions where multiline values are allowed.\n\n  function skipWhiteSpace() {\n    while (index < length) {\n      var charCode = input.charCodeAt(index);\n      if (isWhiteSpace(charCode)) {\n        index++;\n      } else if (isLineTerminator(charCode)) {\n        line++;\n        lineStart = ++index;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // Identifiers, keywords, booleans and nil all look the same syntax wise. We\n  // simply go through them one by one and defaulting to an identifier if no\n  // previous case matched.\n\n  function scanIdentifierOrKeyword() {\n    var value, type;\n\n    // Slicing the input string is prefered before string concatenation in a\n    // loop for performance reasons.\n    while (isIdentifierPart(input.charCodeAt(++index)));\n    value = input.slice(tokenStart, index);\n\n    // Decide on the token type and possibly cast the value.\n    if (isKeyword(value)) {\n      type = Keyword;\n    } else if ('true' === value || 'false' === value) {\n      type = BooleanLiteral;\n      value = ('true' === value);\n    } else if ('nil' === value) {\n      type = NilLiteral;\n      value = null;\n    } else {\n      type = Identifier;\n    }\n\n    return {\n        type: type\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Once a punctuator reaches this function it should already have been\n  // validated so we simply return it as a token.\n\n  function scanPunctuator(value) {\n    index += value.length;\n    return {\n        type: Punctuator\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // A vararg literal consists of three dots.\n\n  function scanVarargLiteral() {\n    index += 3;\n    return {\n        type: VarargLiteral\n      , value: '...'\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Find the string literal by matching the delimiter marks used.\n\n  function scanStringLiteral() {\n    var delimiter = input.charCodeAt(index++)\n      , stringStart = index\n      , string = ''\n      , charCode;\n\n    while (index < length) {\n      charCode = input.charCodeAt(index++);\n      if (delimiter === charCode) break;\n      if (92 === charCode) { // \\\n        string += input.slice(stringStart, index - 1) + readEscapeSequence();\n        stringStart = index;\n      }\n      // EOF or `\\n` terminates a string literal. If we haven't found the\n      // ending delimiter by now, raise an exception.\n      else if (index >= length || isLineTerminator(charCode)) {\n        string += input.slice(stringStart, index - 1);\n        raise({}, errors.unfinishedString, string + String.fromCharCode(charCode));\n      }\n    }\n    string += input.slice(stringStart, index - 1);\n\n    return {\n        type: StringLiteral\n      , value: string\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Expect a multiline string literal and return it as a regular string\n  // literal, if it doesn't validate into a valid multiline string, throw an\n  // exception.\n\n  function scanLongStringLiteral() {\n    var string = readLongString();\n    // Fail if it's not a multiline literal.\n    if (false === string) raise(token, errors.expected, '[', token.value);\n\n    return {\n        type: StringLiteral\n      , value: string\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Numeric literals will be returned as floating-point numbers instead of\n  // strings. The raw value should be retrieved from slicing the input string\n  // later on in the process.\n  //\n  // If a hexadecimal number is encountered, it will be converted.\n\n  function scanNumericLiteral() {\n    var character = input.charAt(index)\n      , next = input.charAt(index + 1);\n\n    var value = ('0' === character && 'xX'.indexOf(next || null) >= 0) ?\n      readHexLiteral() : readDecLiteral();\n\n    return {\n        type: NumericLiteral\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Lua hexadecimals have an optional fraction part and an optional binary\n  // exoponent part. These are not included in JavaScript so we will compute\n  // all three parts separately and then sum them up at the end of the function\n  // with the following algorithm.\n  //\n  //     Digit := toDec(digit)\n  //     Fraction := toDec(fraction) / 16 ^ fractionCount\n  //     BinaryExp := 2 ^ binaryExp\n  //     Number := ( Digit + Fraction ) * BinaryExp\n\n  function readHexLiteral() {\n    var fraction = 0 // defaults to 0 as it gets summed\n      , binaryExponent = 1 // defaults to 1 as it gets multiplied\n      , binarySign = 1 // positive\n      , digit, fractionStart, exponentStart, digitStart;\n\n    digitStart = index += 2; // Skip 0x part\n\n    // A minimum of one hex digit is required.\n    if (!isHexDigit(input.charCodeAt(index)))\n      raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n    while (isHexDigit(input.charCodeAt(index))) index++;\n    // Convert the hexadecimal digit to base 10.\n    digit = parseInt(input.slice(digitStart, index), 16);\n\n    // Fraction part i optional.\n    if ('.' === input.charAt(index)) {\n      fractionStart = ++index;\n\n      while (isHexDigit(input.charCodeAt(index))) index++;\n      fraction = input.slice(fractionStart, index);\n\n      // Empty fraction parts should default to 0, others should be converted\n      // 0.x form so we can use summation at the end.\n      fraction = (fractionStart === index) ? 0\n        : parseInt(fraction, 16) / Math.pow(16, index - fractionStart);\n    }\n\n    // Binary exponents are optional\n    if ('pP'.indexOf(input.charAt(index) || null) >= 0) {\n      index++;\n\n      // Sign part is optional and defaults to 1 (positive).\n      if ('+-'.indexOf(input.charAt(index) || null) >= 0)\n        binarySign = ('+' === input.charAt(index++)) ? 1 : -1;\n\n      exponentStart = index;\n\n      // The binary exponent sign requires a decimal digit.\n      if (!isDecDigit(input.charCodeAt(index)))\n        raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n      while (isDecDigit(input.charCodeAt(index))) index++;\n      binaryExponent = input.slice(exponentStart, index);\n\n      // Calculate the binary exponent of the number.\n      binaryExponent = Math.pow(2, binaryExponent * binarySign);\n    }\n\n    return (digit + fraction) * binaryExponent;\n  }\n\n  // Decimal numbers are exactly the same in Lua and in JavaScript, because of\n  // this we check where the token ends and then parse it with native\n  // functions.\n\n  function readDecLiteral() {\n    while (isDecDigit(input.charCodeAt(index))) index++;\n    // Fraction part is optional\n    if ('.' === input.charAt(index)) {\n      index++;\n      // Fraction part defaults to 0\n      while (isDecDigit(input.charCodeAt(index))) index++;\n    }\n    // Exponent part is optional.\n    if ('eE'.indexOf(input.charAt(index) || null) >= 0) {\n      index++;\n      // Sign part is optional.\n      if ('+-'.indexOf(input.charAt(index) || null) >= 0) index++;\n      // An exponent is required to contain at least one decimal digit.\n      if (!isDecDigit(input.charCodeAt(index)))\n        raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n      while (isDecDigit(input.charCodeAt(index))) index++;\n    }\n\n    return parseFloat(input.slice(tokenStart, index));\n  }\n\n\n  // Translate escape sequences to the actual characters.\n\n  function readEscapeSequence() {\n    var sequenceStart = index;\n    switch (input.charAt(index)) {\n      // Lua allow the following escape sequences.\n      // We don't escape the bell sequence.\n      case 'n': index++; return '\\n';\n      case 'r': index++; return '\\r';\n      case 't': index++; return '\\t';\n      case 'v': index++; return '\\x0B';\n      case 'b': index++; return '\\b';\n      case 'f': index++; return '\\f';\n      // Skips the following span of white-space.\n      case 'z': index++; skipWhiteSpace(); return '';\n      // Byte representation should for now be returned as is.\n      case 'x':\n        // \\xXX, where XX is a sequence of exactly two hexadecimal digits\n        if (isHexDigit(input.charCodeAt(index + 1)) &&\n            isHexDigit(input.charCodeAt(index + 2))) {\n          index += 3;\n          // Return it as is, without translating the byte.\n          return '\\\\' + input.slice(sequenceStart, index);\n        }\n        return '\\\\' + input.charAt(index++);\n      default:\n        // \\ddd, where ddd is a sequence of up to three decimal digits.\n        if (isDecDigit(input.charCodeAt(index))) {\n          while (isDecDigit(input.charCodeAt(++index)));\n          return '\\\\' + input.slice(sequenceStart, index);\n        }\n        // Simply return the \\ as is, it's not escaping any sequence.\n        return input.charAt(index++);\n    }\n  }\n\n  // Comments begin with -- after which it will be decided if they are\n  // multiline comments or not.\n  //\n  // The multiline functionality works the exact same way as with string\n  // literals so we reuse the functionality.\n\n  function scanComment() {\n    tokenStart = index;\n    index += 2; // --\n\n    var character = input.charAt(index)\n      , content = ''\n      , isLong = false\n      , commentStart = index\n      , lineStartComment = lineStart\n      , lineComment = line;\n\n    if ('[' === character) {\n      content = readLongString();\n      // This wasn't a multiline comment after all.\n      if (false === content) content = character;\n      else isLong = true;\n    }\n    // Scan until next line as long as it's not a multiline comment.\n    if (!isLong) {\n      while (index < length) {\n        if (isLineTerminator(input.charCodeAt(index))) break;\n        index++;\n      }\n      if (options.comments) content = input.slice(commentStart, index);\n    }\n\n    if (options.comments) {\n      var node = ast.comment(content, input.slice(tokenStart, index));\n\n      // `Marker`s depend on tokens available in the parser and as comments are\n      // intercepted in the lexer all location data is set manually.\n      if (options.locations) {\n        node.loc = {\n            start: { line: lineComment, column: tokenStart - lineStartComment }\n          , end: { line: line, column: index - lineStart }\n        };\n      }\n      if (options.ranges) {\n        node.range = [tokenStart, index];\n      }\n      comments.push(node);\n    }\n  }\n\n  // Read a multiline string by calculating the depth of `=` characters and\n  // then appending until an equal depth is found.\n\n  function readLongString() {\n    var level = 0\n      , content = ''\n      , terminator = false\n      , character, stringStart;\n\n    index++; // [\n\n    // Calculate the depth of the comment.\n    while ('=' === input.charAt(index + level)) level++;\n    // Exit, this is not a long string afterall.\n    if ('[' !== input.charAt(index + level)) return false;\n\n    index += level + 1;\n\n    // If the first character is a newline, ignore it and begin on next line.\n    if (isLineTerminator(input.charCodeAt(index))) {\n      line++;\n      lineStart = index++;\n    }\n\n    stringStart = index;\n    while (index < length) {\n      character = input.charAt(index++);\n\n      // We have to keep track of newlines as `skipWhiteSpace()` does not get\n      // to scan this part.\n      if (isLineTerminator(character.charCodeAt(0))) {\n        line++;\n        lineStart = index;\n      }\n\n      // Once the delimiter is found, iterate through the depth count and see\n      // if it matches.\n      if (']' === character) {\n        terminator = true;\n        for (var i = 0; i < level; i++) {\n          if ('=' !== input.charAt(index + i)) terminator = false;\n        }\n        if (']' !== input.charAt(index + level)) terminator = false;\n      }\n\n      // We reached the end of the multiline string. Get out now.\n      if (terminator) break;\n    }\n    content += input.slice(stringStart, index - 1);\n    index += level + 1;\n\n    return content;\n  }\n\n  // ## Lex functions and helpers.\n\n  // Read the next token.\n  //\n  // This is actually done by setting the current token to the lookahead and\n  // reading in the new lookahead token.\n\n  function next() {\n    previousToken = token;\n    token = lookahead;\n    lookahead = lex();\n  }\n\n  // Consume a token if its value matches. Once consumed or not, return the\n  // success of the operation.\n\n  function consume(value) {\n    if (value === token.value) {\n      next();\n      return true;\n    }\n    return false;\n  }\n\n  // Expect the next token value to match. If not, throw an exception.\n\n  function expect(value) {\n    if (value === token.value) next();\n    else raise(token, errors.expected, value, token.value);\n  }\n\n  // ### Validation functions\n\n  function isWhiteSpace(charCode) {\n    return 9 === charCode || 32 === charCode || 0xB === charCode || 0xC === charCode;\n  }\n\n  function isLineTerminator(charCode) {\n    return 10 === charCode || 13 === charCode;\n  }\n\n  function isDecDigit(charCode) {\n    return charCode >= 48 && charCode <= 57;\n  }\n\n  function isHexDigit(charCode) {\n    return (charCode >= 48 && charCode <= 57) || (charCode >= 97 && charCode <= 102) || (charCode >= 65 && charCode <= 70);\n  }\n\n  // From [Lua 5.2](http://www.lua.org/manual/5.2/manual.html#8.1) onwards\n  // identifiers cannot use locale-dependet letters.\n\n  function isIdentifierStart(charCode) {\n    return (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || 95 === charCode;\n  }\n\n  function isIdentifierPart(charCode) {\n    return (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || 95 === charCode || (charCode >= 48 && charCode <= 57);\n  }\n\n  // [3.1 Lexical Conventions](http://www.lua.org/manual/5.2/manual.html#3.1)\n  //\n  // `true`, `false` and `nil` will not be considered keywords, but literals.\n\n  function isKeyword(id) {\n    switch (id.length) {\n      case 2:\n        return 'do' === id || 'if' === id || 'in' === id || 'or' === id;\n      case 3:\n        return 'and' === id || 'end' === id || 'for' === id || 'not' === id;\n      case 4:\n        return 'else' === id || 'goto' === id || 'then' === id;\n      case 5:\n        return 'break' === id || 'local' === id || 'until' === id || 'while' === id;\n      case 6:\n        return 'elseif' === id || 'repeat' === id || 'return' === id;\n      case 8:\n        return 'function' === id;\n    }\n    return false;\n  }\n\n  function isUnary(token) {\n    if (Punctuator === token.type) return '#-~'.indexOf(token.value) >= 0;\n    if (Keyword === token.type) return 'not' === token.value;\n    return false;\n  }\n\n  // @TODO this needs to be rethought.\n  function isCallExpression(expression) {\n    switch (expression.type) {\n      case 'CallExpression':\n      case 'TableCallExpression':\n      case 'StringCallExpression':\n        return true;\n    }\n    return false;\n  }\n\n  // Check if the token syntactically closes a block.\n\n  function isBlockFollow(token) {\n    if (EOF === token.type) return true;\n    if (Keyword !== token.type) return false;\n    switch (token.value) {\n      case 'else': case 'elseif':\n      case 'end': case 'until':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Scope\n  // -----\n\n  // Store each block scope as a an array of identifier names. Each scope is\n  // stored in an FILO-array.\n  var scopes\n    // The current scope index\n    , scopeDepth\n    // A list of all global identifier nodes.\n    , globals;\n\n  // Create a new scope inheriting all declarations from the previous scope.\n  function createScope() {\n    scopes.push(Array.apply(null, scopes[scopeDepth++]));\n  }\n\n  // Exit and remove the current scope.\n  function exitScope() {\n    scopes.pop();\n    scopeDepth--;\n  }\n\n  // Add identifier name to the current scope if it doesnt already exist.\n  function scopeIdentifierName(name) {\n    if (-1 !== indexOf(scopes[scopeDepth], name)) return;\n    scopes[scopeDepth].push(name);\n  }\n\n  // Add identifier to the current scope\n  function scopeIdentifier(node) {\n    scopeIdentifierName(node.name);\n    attachScope(node, true);\n  }\n\n  // Attach scope information to node. If the node is global, store it in the\n  // globals array so we can return the information to the user.\n  function attachScope(node, isLocal) {\n    if (!isLocal && -1 === indexOfObject(globals, 'name', node.name))\n      globals.push(node);\n\n    node.isLocal = isLocal;\n  }\n\n  // Is the identifier name available in this scope.\n  function scopeHasName(name) {\n    return (-1 !== indexOf(scopes[scopeDepth], name));\n  }\n\n  // Location tracking\n  // -----------------\n  //\n  // Locations are stored in FILO-array as a `Marker` object consisting of both\n  // `loc` and `range` data. Once a `Marker` is popped off the list an end\n  // location is added and the data is attached to a syntax node.\n\n  var locations = []\n    , trackLocations;\n\n  function createLocationMarker() {\n    return new Marker(token);\n  }\n\n  function Marker(token) {\n    if (options.locations) {\n      this.loc = {\n          start: {\n            line: token.line\n          , column: token.range[0] - token.lineStart\n        }\n        , end: {\n            line: 0\n          , column: 0\n        }\n      };\n    }\n    if (options.ranges) this.range = [token.range[0], 0];\n  }\n\n  // Complete the location data stored in the `Marker` by adding the location\n  // of the *previous token* as an end location.\n  Marker.prototype.complete = function() {\n    if (options.locations) {\n      this.loc.end.line = previousToken.line;\n      this.loc.end.column = previousToken.range[1] - previousToken.lineStart;\n    }\n    if (options.ranges) {\n      this.range[1] = previousToken.range[1];\n    }\n  };\n\n  // Create a new `Marker` and add it to the FILO-array.\n  function markLocation() {\n    if (trackLocations) locations.push(createLocationMarker());\n  }\n\n  // Push an arbitrary `Marker` object onto the FILO-array.\n  function pushLocation(marker) {\n    if (trackLocations) locations.push(marker);\n  }\n\n  // Parse functions\n  // ---------------\n\n  // Chunk is the main program object. Syntactically it's the same as a block.\n  //\n  //     chunk ::= block\n\n  function parseChunk() {\n    next();\n    markLocation();\n    var body = parseBlock();\n    if (EOF !== token.type) unexpected(token);\n    // If the body is empty no previousToken exists when finishNode runs.\n    if (trackLocations && !body.length) previousToken = token;\n    return finishNode(ast.chunk(body));\n  }\n\n  // A block contains a list of statements with an optional return statement\n  // as its last statement.\n  //\n  //     block ::= {stat} [retstat]\n\n  function parseBlock(terminator) {\n    var block = []\n      , statement;\n\n    // Each block creates a new scope.\n    if (options.scope) createScope();\n\n    while (!isBlockFollow(token)) {\n      // Return has to be the last statement in a block.\n      if ('return' === token.value) {\n        block.push(parseStatement());\n        break;\n      }\n      statement = parseStatement();\n      // Statements are only added if they are returned, this allows us to\n      // ignore some statements, such as EmptyStatement.\n      if (statement) block.push(statement);\n    }\n\n    if (options.scope) exitScope();\n    // Doesn't really need an ast node\n    return block;\n  }\n\n  // There are two types of statements, simple and compound.\n  //\n  //     statement ::= break | goto | do | while | repeat | return\n  //          | if | for | function | local | label | assignment\n  //          | functioncall | ';'\n\n  function parseStatement() {\n    markLocation();\n    if (Keyword === token.type) {\n      switch (token.value) {\n        case 'local':    next(); return parseLocalStatement();\n        case 'if':       next(); return parseIfStatement();\n        case 'return':   next(); return parseReturnStatement();\n        case 'function': next();\n          var name = parseFunctionName();\n          return parseFunctionDeclaration(name);\n        case 'while':    next(); return parseWhileStatement();\n        case 'for':      next(); return parseForStatement();\n        case 'repeat':   next(); return parseRepeatStatement();\n        case 'break':    next(); return parseBreakStatement();\n        case 'do':       next(); return parseDoStatement();\n        case 'goto':     next(); return parseGotoStatement();\n      }\n    }\n\n    if (Punctuator === token.type) {\n      if (consume('::')) return parseLabelStatement();\n    }\n    // Assignments memorizes the location and pushes it manually for wrapper\n    // nodes. Additionally empty `;` statements should not mark a location.\n    if (trackLocations) locations.pop();\n\n    // When a `;` is encounted, simply eat it without storing it.\n    if (consume(';')) return;\n\n    return parseAssignmentOrCallStatement();\n  }\n\n  // ## Statements\n\n  //     label ::= '::' Name '::'\n\n  function parseLabelStatement() {\n    var name = token.value\n      , label = parseIdentifier();\n\n    if (options.scope) {\n      scopeIdentifierName('::' + name + '::');\n      attachScope(label, true);\n    }\n\n    expect('::');\n    return finishNode(ast.labelStatement(label));\n  }\n\n  //     break ::= 'break'\n\n  function parseBreakStatement() {\n    return finishNode(ast.breakStatement());\n  }\n\n  //     goto ::= 'goto' Name\n\n  function parseGotoStatement() {\n    var name = token.value\n      , label = parseIdentifier();\n\n    if (options.scope) label.isLabel = scopeHasName('::' + name + '::');\n    return finishNode(ast.gotoStatement(label));\n  }\n\n  //     do ::= 'do' block 'end'\n\n  function parseDoStatement() {\n    var body = parseBlock();\n    expect('end');\n    return finishNode(ast.doStatement(body));\n  }\n\n  //     while ::= 'while' exp 'do' block 'end'\n\n  function parseWhileStatement() {\n    var condition = parseExpectedExpression();\n    expect('do');\n    var body = parseBlock();\n    expect('end');\n    return finishNode(ast.whileStatement(condition, body));\n  }\n\n  //     repeat ::= 'repeat' block 'until' exp\n\n  function parseRepeatStatement() {\n    var body = parseBlock();\n    expect('until');\n    var condition = parseExpectedExpression();\n    return finishNode(ast.repeatStatement(condition, body));\n  }\n\n  //     retstat ::= 'return' [exp {',' exp}] [';']\n\n  function parseReturnStatement() {\n    var expressions = [];\n\n    if ('end' !== token.value) {\n      var expression = parseExpression();\n      if (null != expression) expressions.push(expression);\n      while (consume(',')) {\n        expression = parseExpectedExpression();\n        expressions.push(expression);\n      }\n      consume(';'); // grammar tells us ; is optional here.\n    }\n    return finishNode(ast.returnStatement(expressions));\n  }\n\n  //     if ::= 'if' exp 'then' block {elif} ['else' block] 'end'\n  //     elif ::= 'elseif' exp 'then' block\n\n  function parseIfStatement() {\n    var clauses = []\n      , condition\n      , body\n      , marker;\n\n    // IfClauses begin at the same location as the parent IfStatement.\n    // It ends at the start of `end`, `else`, or `elseif`.\n    if (trackLocations) {\n      marker = locations[locations.length - 1];\n      locations.push(marker);\n    }\n    condition = parseExpectedExpression();\n    expect('then');\n    body = parseBlock();\n    clauses.push(finishNode(ast.ifClause(condition, body)));\n\n    if (trackLocations) marker = createLocationMarker();\n    while (consume('elseif')) {\n      pushLocation(marker);\n      condition = parseExpectedExpression();\n      expect('then');\n      body = parseBlock();\n      clauses.push(finishNode(ast.elseifClause(condition, body)));\n      if (trackLocations) marker = createLocationMarker();\n    }\n\n    if (consume('else')) {\n      // Include the `else` in the location of ElseClause.\n      if (trackLocations) {\n        marker = new Marker(previousToken);\n        locations.push(marker);\n      }\n      body = parseBlock();\n      clauses.push(finishNode(ast.elseClause(body)));\n    }\n\n    expect('end');\n    return finishNode(ast.ifStatement(clauses));\n  }\n\n  // There are two types of for statements, generic and numeric.\n  //\n  //     for ::= Name '=' exp ',' exp [',' exp] 'do' block 'end'\n  //     for ::= namelist 'in' explist 'do' block 'end'\n  //     namelist ::= Name {',' Name}\n  //     explist ::= exp {',' exp}\n\n  function parseForStatement() {\n    var variable = parseIdentifier()\n      , body;\n\n    // The start-identifier is local.\n    if (options.scope) scopeIdentifier(variable);\n\n    // If the first expression is followed by a `=` punctuator, this is a\n    // Numeric For Statement.\n    if (consume('=')) {\n      // Start expression\n      var start = parseExpectedExpression();\n      expect(',');\n      // End expression\n      var end = parseExpectedExpression();\n      // Optional step expression\n      var step = consume(',') ? parseExpectedExpression() : null;\n\n      expect('do');\n      body = parseBlock();\n      expect('end');\n\n      return finishNode(ast.forNumericStatement(variable, start, end, step, body));\n    }\n    // If not, it's a Generic For Statement\n    else {\n      // The namelist can contain one or more identifiers.\n      var variables = [variable];\n      while (consume(',')) {\n        variable = parseIdentifier();\n        // Each variable in the namelist is locally scoped.\n        if (options.scope) scopeIdentifier(variable);\n        variables.push(variable);\n      }\n      expect('in');\n      var iterators = [];\n\n      // One or more expressions in the explist.\n      do {\n        var expression = parseExpectedExpression();\n        iterators.push(expression);\n      } while (consume(','));\n\n      expect('do');\n      body = parseBlock();\n      expect('end');\n\n      return finishNode(ast.forGenericStatement(variables, iterators, body));\n    }\n  }\n\n  // Local statements can either be variable assignments or function\n  // definitions. If a function definition is found, it will be delegated to\n  // `parseFunctionDeclaration()` with the isLocal flag.\n  //\n  // This AST structure might change into a local assignment with a function\n  // child.\n  //\n  //     local ::= 'local' 'function' Name funcdecl\n  //        | 'local' Name {',' Name} ['=' exp {',' exp}\n\n  function parseLocalStatement() {\n    var name;\n\n    if (Identifier === token.type) {\n      var variables = []\n        , init = [];\n\n      do {\n        name = parseIdentifier();\n\n        variables.push(name);\n      } while (consume(','));\n\n      if (consume('=')) {\n        do {\n          var expression = parseExpectedExpression();\n          init.push(expression);\n        } while (consume(','));\n      }\n\n      // Declarations doesn't exist before the statement has been evaluated.\n      // Therefore assignments can't use their declarator. And the identifiers\n      // shouldn't be added to the scope until the statement is complete.\n      if (options.scope) {\n        for (var i = 0, l = variables.length; i < l; i++) {\n          scopeIdentifier(variables[i]);\n        }\n      }\n\n      return finishNode(ast.localStatement(variables, init));\n    }\n    if (consume('function')) {\n      name = parseIdentifier();\n      if (options.scope) scopeIdentifier(name);\n\n      // MemberExpressions are not allowed in local function statements.\n      return parseFunctionDeclaration(name, true);\n    } else {\n      raiseUnexpectedToken('<name>', token);\n    }\n  }\n\n  //     assignment ::= varlist '=' explist\n  //     varlist ::= prefixexp {',' prefixexp}\n  //     explist ::= exp {',' exp}\n  //\n  //     call ::= callexp\n  //     callexp ::= prefixexp args | prefixexp ':' Name args\n\n  function parseAssignmentOrCallStatement() {\n    // Keep a reference to the previous token for better error messages in case\n    // of invalid statement\n    var previous = token\n      , expression, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n    expression = parsePrefixExpression();\n\n    if (null == expression) return unexpected(token);\n    if (',='.indexOf(token.value) >= 0) {\n      var variables = [expression]\n        , init = []\n        , exp;\n\n      while (consume(',')) {\n        exp = parsePrefixExpression();\n        if (null == exp) raiseUnexpectedToken('<expression>', token);\n        variables.push(exp);\n      }\n      expect('=');\n      do {\n        exp = parseExpectedExpression();\n        init.push(exp);\n      } while (consume(','));\n\n      pushLocation(marker);\n      return finishNode(ast.assignmentStatement(variables, init));\n    }\n    if (isCallExpression(expression)) {\n      pushLocation(marker);\n      return finishNode(ast.callStatement(expression));\n    }\n    // The prefix expression was neither part of an assignment or a\n    // callstatement, however as it was valid it's been consumed, so raise\n    // the exception on the previous token to provide a helpful message.\n    return unexpected(previous);\n  }\n\n\n\n  // ### Non-statements\n\n  //     Identifier ::= Name\n\n  function parseIdentifier() {\n    markLocation();\n    var identifier = token.value;\n    if (Identifier !== token.type) raiseUnexpectedToken('<name>', token);\n    next();\n    return finishNode(ast.identifier(identifier));\n  }\n\n  // Parse the functions parameters and body block. The name should already\n  // have been parsed and passed to this declaration function. By separating\n  // this we allow for anonymous functions in expressions.\n  //\n  // For local functions there's a boolean parameter which needs to be set\n  // when parsing the declaration.\n  //\n  //     funcdecl ::= '(' [parlist] ')' block 'end'\n  //     parlist ::= Name {',' Name} | [',' '...'] | '...'\n\n  function parseFunctionDeclaration(name, isLocal) {\n    var parameters = [];\n    expect('(');\n\n    // The declaration has arguments\n    if (!consume(')')) {\n      // Arguments are a comma separated list of identifiers, optionally ending\n      // with a vararg.\n      while (true) {\n        if (Identifier === token.type) {\n          var parameter = parseIdentifier();\n          // Function parameters are local.\n          if (options.scope) scopeIdentifier(parameter);\n\n          parameters.push(parameter);\n\n          if (consume(',')) continue;\n          else if (consume(')')) break;\n        }\n        // No arguments are allowed after a vararg.\n        else if (VarargLiteral === token.type) {\n          parameters.push(parsePrimaryExpression());\n          expect(')');\n          break;\n        } else {\n          raiseUnexpectedToken('<name> or \\'...\\'', token);\n        }\n      }\n    }\n\n    var body = parseBlock();\n    expect('end');\n\n    isLocal = isLocal || false;\n    return finishNode(ast.functionStatement(name, parameters, isLocal, body));\n  }\n\n  // Parse the function name as identifiers and member expressions.\n  //\n  //     Name {'.' Name} [':' Name]\n\n  function parseFunctionName() {\n    var base, name, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n    base = parseIdentifier();\n\n    if (options.scope) attachScope(base, false);\n\n    while (consume('.')) {\n      pushLocation(marker);\n      name = parseIdentifier();\n      if (options.scope) attachScope(name, false);\n      base = finishNode(ast.memberExpression(base, '.', name));\n    }\n\n    if (consume(':')) {\n      pushLocation(marker);\n      name = parseIdentifier();\n      if (options.scope) attachScope(name, false);\n      base = finishNode(ast.memberExpression(base, ':', name));\n    }\n\n    return base;\n  }\n\n  //     tableconstructor ::= '{' [fieldlist] '}'\n  //     fieldlist ::= field {fieldsep field} fieldsep\n  //     field ::= '[' exp ']' '=' exp | Name = 'exp' | exp\n  //\n  //     fieldsep ::= ',' | ';'\n\n  function parseTableConstructor() {\n    var fields = []\n      , key, value;\n\n    while (true) {\n      markLocation();\n      if (Punctuator === token.type && consume('[')) {\n        key = parseExpectedExpression();\n        expect(']');\n        expect('=');\n        value = parseExpectedExpression();\n        fields.push(finishNode(ast.tableKey(key, value)));\n      } else if (Identifier === token.type) {\n        key = parseExpectedExpression();\n        if (consume('=')) {\n          value = parseExpectedExpression();\n          fields.push(finishNode(ast.tableKeyString(key, value)));\n        } else {\n          fields.push(finishNode(ast.tableValue(key)));\n        }\n      } else {\n        if (null == (value = parseExpression())) {\n          locations.pop();\n          break;\n        }\n        fields.push(finishNode(ast.tableValue(value)));\n      }\n      if (',;'.indexOf(token.value) >= 0) {\n        next();\n        continue;\n      }\n      if ('}' === token.value) break;\n    }\n    expect('}');\n    return finishNode(ast.tableConstructorExpression(fields));\n  }\n\n  // Expression parser\n  // -----------------\n  //\n  // Expressions are evaluated and always return a value. If nothing is\n  // matched null will be returned.\n  //\n  //     exp ::= (unop exp | primary | prefixexp ) { binop exp }\n  //\n  //     primary ::= nil | false | true | Number | String | '...'\n  //          | functiondef | tableconstructor\n  //\n  //     prefixexp ::= (Name | '(' exp ')' ) { '[' exp ']'\n  //          | '.' Name | ':' Name args | args }\n  //\n\n  function parseExpression() {\n    var expression = parseSubExpression(0);\n    return expression;\n  }\n\n  // Parse an expression expecting it to be valid.\n\n  function parseExpectedExpression() {\n    var expression = parseExpression();\n    if (null == expression) raiseUnexpectedToken('<expression>', token);\n    else return expression;\n  }\n\n\n  // Return the precedence priority of the operator.\n  //\n  // As unary `-` can't be distinguished from binary `-`, unary precedence\n  // isn't described in this table but in `parseSubExpression()` itself.\n  //\n  // As this function gets hit on every expression it's been optimized due to\n  // the expensive CompareICStub which took ~8% of the parse time.\n\n  function binaryPrecedence(operator) {\n    var charCode = operator.charCodeAt(0)\n      , length = operator.length;\n\n    if (1 === length) {\n      switch (charCode) {\n        case 94: return 10; // ^\n        case 42: case 47: case 37: return 7; // * / %\n        case 43: case 45: return 6; // + -\n        case 60: case 62: return 3; // < >\n      }\n    } else if (2 === length) {\n      switch (charCode) {\n        case 46: return 5; // ..\n        case 60: case 62: case 61: case 126: return 3; // <= >= == ~=\n        case 111: return 1; // or\n      }\n    } else if (97 === charCode && 'and' === operator) return 2;\n    return 0;\n  }\n\n  // Implement an operator-precedence parser to handle binary operator\n  // precedence.\n  //\n  // We use this algorithm because it's compact, it's fast and Lua core uses\n  // the same so we can be sure our expressions are parsed in the same manner\n  // without excessive amounts of tests.\n  //\n  //     exp ::= (unop exp | primary | prefixexp ) { binop exp }\n\n  function parseSubExpression(minPrecedence) {\n    var operator = token.value\n    // The left-hand side in binary operations.\n      , expression, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    // UnaryExpression\n    if (isUnary(token)) {\n      markLocation();\n      next();\n      var argument = parseSubExpression(8);\n      if (argument == null) raiseUnexpectedToken('<expression>', token);\n      expression = finishNode(ast.unaryExpression(operator, argument));\n    }\n    if (null == expression) {\n      // PrimaryExpression\n      expression = parsePrimaryExpression();\n\n      // PrefixExpression\n      if (null == expression) {\n        expression = parsePrefixExpression();\n      }\n    }\n    // This is not a valid left hand expression.\n    if (null == expression) return null;\n\n    var precedence;\n    while (true) {\n      operator = token.value;\n\n      precedence = (Punctuator === token.type || Keyword === token.type) ?\n        binaryPrecedence(operator) : 0;\n\n      if (precedence === 0 || precedence <= minPrecedence) break;\n      // Right-hand precedence operators\n      if ('^' === operator || '..' === operator) precedence--;\n      next();\n      var right = parseSubExpression(precedence);\n      if (null == right) raiseUnexpectedToken('<expression>', token);\n      // Push in the marker created before the loop to wrap its entirety.\n      if (trackLocations) locations.push(marker);\n      expression = finishNode(ast.binaryExpression(operator, expression, right));\n\n    }\n    return expression;\n  }\n\n  //     prefixexp ::= prefix {suffix}\n  //     prefix ::= Name | '(' exp ')'\n  //     suffix ::= '[' exp ']' | '.' Name | ':' Name args | args\n  //\n  //     args ::= '(' [explist] ')' | tableconstructor | String\n\n  function parsePrefixExpression() {\n    var base, name, marker\n      // Keep track of the scope, if a parent is local so are the children.\n      , isLocal;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    // The prefix\n    if (Identifier === token.type) {\n      name = token.value;\n      base = parseIdentifier();\n      // Set the parent scope.\n      if (options.scope) attachScope(base, isLocal = scopeHasName(name));\n    } else if (consume('(')) {\n      base = parseExpectedExpression();\n      expect(')');\n      if (options.scope) isLocal = base.isLocal;\n    } else {\n      return null;\n    }\n\n    // The suffix\n    var expression, identifier;\n    while (true) {\n      if (Punctuator === token.type) {\n        switch (token.value) {\n          case '[':\n            pushLocation(marker);\n            next();\n            expression = parseExpectedExpression();\n            base = finishNode(ast.indexExpression(base, expression));\n            expect(']');\n            break;\n          case '.':\n            pushLocation(marker);\n            next();\n            identifier = parseIdentifier();\n            // Inherit the scope\n            if (options.scope) attachScope(identifier, isLocal);\n            base = finishNode(ast.memberExpression(base, '.', identifier));\n            break;\n          case ':':\n            pushLocation(marker);\n            next();\n            identifier = parseIdentifier();\n            if (options.scope) attachScope(identifier, isLocal);\n            base = finishNode(ast.memberExpression(base, ':', identifier));\n            // Once a : is found, this has to be a CallExpression, otherwise\n            // throw an error.\n            pushLocation(marker);\n            base = parseCallExpression(base);\n            break;\n          case '(': case '{': // args\n            pushLocation(marker);\n            base = parseCallExpression(base);\n            break;\n          default:\n            return base;\n        }\n      } else if (StringLiteral === token.type) {\n        pushLocation(marker);\n        base = parseCallExpression(base);\n      } else {\n        break;\n      }\n    }\n\n    return base;\n  }\n\n  //     args ::= '(' [explist] ')' | tableconstructor | String\n\n  function parseCallExpression(base) {\n    if (Punctuator === token.type) {\n      switch (token.value) {\n        case '(':\n          next();\n\n          // List of expressions\n          var expressions = [];\n          var expression = parseExpression();\n          if (null != expression) expressions.push(expression);\n          while (consume(',')) {\n            expression = parseExpectedExpression();\n            expressions.push(expression);\n          }\n\n          expect(')');\n          return finishNode(ast.callExpression(base, expressions));\n\n        case '{':\n          markLocation();\n          next();\n          var table = parseTableConstructor();\n          return finishNode(ast.tableCallExpression(base, table));\n      }\n    } else if (StringLiteral === token.type) {\n      return finishNode(ast.stringCallExpression(base, parsePrimaryExpression()));\n    }\n\n    raiseUnexpectedToken('function arguments', token);\n  }\n\n  //     primary ::= String | Numeric | nil | true | false\n  //          | functiondef | tableconstructor | '...'\n\n  function parsePrimaryExpression() {\n    var literals = StringLiteral | NumericLiteral | BooleanLiteral | NilLiteral | VarargLiteral\n      , value = token.value\n      , type = token.type\n      , marker;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    if (type & literals) {\n      pushLocation(marker);\n      var raw = input.slice(token.range[0], token.range[1]);\n      next();\n      return finishNode(ast.literal(type, value, raw));\n    } else if (Keyword === type && 'function' === value) {\n      pushLocation(marker);\n      next();\n      return parseFunctionDeclaration(null);\n    } else if (consume('{')) {\n      pushLocation(marker);\n      return parseTableConstructor();\n    }\n  }\n\n  // Parser\n  // ------\n\n  // Export the main parser.\n  //\n  //   - `wait` Hold parsing until end() is called. Defaults to false\n  //   - `comments` Store comments. Defaults to true.\n  //   - `scope` Track identifier scope. Defaults to false.\n  //\n  // Example:\n  //\n  //     var parser = require('luaparser');\n  //     parser.parse('i = 0');\n\n  exports.parse = parse;\n\n  function parse(_input, _options) {\n    if ('undefined' === typeof _options && 'object' === typeof _input) {\n      _options = _input;\n      _input = undefined;\n    }\n    if (!_options) _options = {};\n\n    input = _input || '';\n    options = extend(defaultOptions, _options);\n\n    // Rewind the lexer\n    index = 0;\n    line = 1;\n    lineStart = 0;\n    length = input.length;\n    // When tracking identifier scope, initialize with an empty scope.\n    scopes = [[]];\n    scopeDepth = 0;\n    globals = [];\n    locations = [];\n\n    if (options.comments) comments = [];\n    if (!options.wait) return end();\n    return exports;\n  }\n\n  // Write to the source code buffer without beginning the parse.\n  exports.write = write;\n\n  function write(_input) {\n    input += String(_input);\n    length = input.length;\n    return exports;\n  }\n\n  // Send an EOF and begin parsing.\n  exports.end = end;\n\n  function end(_input) {\n    if ('undefined' !== typeof _input) write(_input);\n\n    length = input.length;\n    trackLocations = options.locations || options.ranges;\n    // Initialize with a lookahead token.\n    lookahead = lex();\n\n    var chunk = parseChunk();\n    if (options.comments) chunk.comments = comments;\n    if (options.scope) chunk.globals = globals;\n\n    if (locations.length > 0)\n      throw new Error('Location tracking failed. This is most likely a bug in luaparse');\n\n    return chunk;\n  }\n\n}));\n/* vim: set sw=2 ts=2 et tw=79 : */\n\n});\n"]}
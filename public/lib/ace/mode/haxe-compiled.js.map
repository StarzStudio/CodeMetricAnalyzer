{"version":3,"sources":["haxe.js"],"names":[],"mappings":";;AAAA,OAAO,UAAS,OAAT,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC;AAC1C;;AAEA,QAAI,MAAM,QAAQ,YAAR,CAAV;AACA,QAAI,WAAW,QAAQ,QAAR,EAAkB,IAAjC;AACA,QAAI,qBAAqB,QAAQ,wBAAR,EAAkC,kBAA3D;AACA,QAAI,uBAAuB,QAAQ,0BAAR,EAAoC,oBAA/D;AACA,QAAI,kBAAkB,QAAQ,oBAAR,EAA8B,eAApD;AACA,QAAI,iBAAiB,QAAQ,kBAAR,EAA4B,QAAjD;;AAEA,QAAI,OAAO,SAAP,IAAO,GAAW;AAClB,aAAK,cAAL,GAAsB,kBAAtB;;AAEA,aAAK,QAAL,GAAgB,IAAI,oBAAJ,EAAhB;AACA,aAAK,UAAL,GAAkB,IAAI,eAAJ,EAAlB;AACA,aAAK,YAAL,GAAoB,IAAI,cAAJ,EAApB;AACH,KAND;AAOA,QAAI,QAAJ,CAAa,IAAb,EAAmB,QAAnB;;AAEA,KAAC,YAAW;AACR,aAAK,gBAAL,GAAwB,IAAxB;AACA,aAAK,YAAL,GAAoB,EAAC,OAAO,IAAR,EAAc,KAAK,IAAnB,EAApB;;AAEA,aAAK,iBAAL,GAAyB,UAAS,KAAT,EAAgB,IAAhB,EAAsB,GAAtB,EAA2B;AAChD,gBAAI,SAAS,KAAK,UAAL,CAAgB,IAAhB,CAAb;;AAEA,gBAAI,gBAAgB,KAAK,YAAL,GAAoB,aAApB,CAAkC,IAAlC,EAAwC,KAAxC,CAApB;AACA,gBAAI,SAAS,cAAc,MAA3B;;AAEA,gBAAI,OAAO,MAAP,IAAiB,OAAO,OAAO,MAAP,GAAc,CAArB,EAAwB,IAAxB,IAAgC,SAArD,EAAgE;AAC5D,uBAAO,MAAP;AACH;;AAED,gBAAI,SAAS,OAAb,EAAsB;AAClB,oBAAI,QAAQ,KAAK,KAAL,CAAW,iBAAX,CAAZ;AACA,oBAAI,KAAJ,EAAW;AACP,8BAAU,GAAV;AACH;AACJ;;AAED,mBAAO,MAAP;AACH,SAlBD;;AAoBA,aAAK,YAAL,GAAoB,UAAS,KAAT,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AAC7C,mBAAO,KAAK,QAAL,CAAc,YAAd,CAA2B,IAA3B,EAAiC,KAAjC,CAAP;AACH,SAFD;;AAIA,aAAK,WAAL,GAAmB,UAAS,KAAT,EAAgB,GAAhB,EAAqB,GAArB,EAA0B;AACzC,iBAAK,QAAL,CAAc,WAAd,CAA0B,GAA1B,EAA+B,GAA/B;AACH,SAFD;;AAIA,aAAK,GAAL,GAAW,eAAX;AACH,KAjCD,EAiCG,IAjCH,CAiCQ,KAAK,SAjCb;;AAmCA,YAAQ,IAAR,GAAe,IAAf;AACC,CAvDD","file":"haxe-compiled.js","sourcesContent":["define(function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HaxeHighlightRules = require(\"./haxe_highlight_rules\").HaxeHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HaxeHighlightRules;\n    \n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/haxe\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"]}
{"version":3,"sources":["highlight_rules_test.js"],"names":[],"mappings":";;AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,CAAC,GAAG,UAAR,EACI,GAAG,UAAH,GAAgB,KAAK,UAArB;;AAEJ,QAAQ,YAAR;;AAEA,IAAI,MAAM,YAAY,GAAtB;AACA,IAAI,OAAO,KAAK,SAAL,CAAe,MAAM,MAAM,CAAN,EAAS,IAAT,CAAc,KAAd,CAArB,CAAX;;AAEA,SAAS,UAAT,CAAoB,IAApB,EAA0B,MAA1B,EAAkC;AAC9B,QAAI,CAAC,MAAL,EAAa,SAAS,OAAT;AACb,WAAO,GAAG,WAAH,CAAe,IAAf,EAAqB,GAArB,CAAyB,UAAS,CAAT,EAAY;AACxC,YAAI,EAAE,KAAF,CAAQ,CAAC,CAAT,KAAe,KAAf,IAAwB,CAAC,OAAO,IAAP,CAAY,CAAZ,CAAzB,IAA2C,CAAC,KAAK,IAAL,CAAU,CAAV,CAAhD,EACI,OAAO,EAAE,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAP;AACP,KAHM,EAGJ,MAHI,CAGG,OAHH,CAAP;AAIH;;AAED,SAAS,QAAT,GAAoB;AAChB,WAAO,WAAW,MAAM,KAAjB,EAAwB,wEAAxB,CAAP;AACH;;AAED,SAAS,UAAT,GAAsB;AAClB,eAAW,OAAX,CAAmB,UAAS,QAAT,EAAmB,CAAnB,EAAsB;AACrC,gBAAQ,GAAR,CAAY,UAAU,IAAE,CAAZ,EAAe,CAAf,IAAoB,mBAApB,GAA4C,QAA5C,GAAuD,SAAnE;AACA,YAAI;AACA,gBAAI,OAAO,QAAQ,QAAQ,QAAhB,EAA0B,IAArC;AACH,SAFD,CAEE,OAAM,CAAN,EAAS;AACP,oBAAQ,IAAR,CAAa,sBAAsB,QAAnC,EAA6C,CAA7C;AACA;AACH;AACD,YAAI,IAAI,IAAI,IAAJ,EAAR;AACA,YAAI,EAAE,sBAAsB,CAAxB,KAA8B,EAAE,kBAAkB,CAApB,CAAlC,EACI,QAAQ,IAAR,CAAa,wBAAwB,QAArC;AACJ,YAAI,CAAC,EAAE,GAAP,EACI,QAAQ,IAAR,CAAa,mBAAmB,QAAhC;AACJ,YAAI,YAAa,IAAI,IAAJ,EAAD,CAAW,YAAX,EAAhB;;AAEA,qBAAa,EAAE,gBAAf,EAAiC,eAAjC,EAAkD,SAAlD,EAA6D,QAA7D;AACA,qBAAa,EAAE,YAAf,EAA6B,gBAA7B,EAA+C,SAA/C,EAA0D,QAA1D;AACH,KAjBD;;AAmBA,aAAS,YAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD;AACjD,YAAI,IAAJ,EAAU;AACN,gBAAI,MAAM,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACrB,qBAAK,OAAL,CAAa,UAAS,CAAT,EAAY;AACrB,uBAAG,SAAH,EAAc,CAAd,EAAiB,QAAjB;AACH,iBAFD;AAGH,aAJD,MAIO;AACH,mBAAG,SAAH,EAAc,IAAd,EAAoB,QAApB;AACH;AACJ;AACJ;;AAED,aAAS,gBAAT,CAA0B,SAA1B,EAAqC,YAArC,EAAmD,QAAnD,EAA6D;AACzD,YAAI,aAAa,aAAjB,EACI,OAFqD,CAE7C;AACZ,YAAI,MAAM,aAAa,KAAb,GAAqB,GAArB,GAA2B,aAAa,GAAlD;AACA,cAAM,aAAa,KAAb,GAAqB,GAA3B;AACA,YAAI,aAAa,QAAjB,EACI,OAAO,aAAa,GAApB;AACJ,YAAI,OAAO,UAAU,aAAV,CAAwB,GAAxB,EAA6B,OAA7B,CAAX;AACA,YAAI,WAAW,KAAK,MAAL,CAAY,IAAZ,CAAiB,UAAS,CAAT,EAAY;AAAE,mBAAO,CAAC,UAAU,IAAV,CAAe,EAAE,IAAjB,CAAR;AAAgC,SAA/D,CAAf;AACA,YAAI,QAAJ,EACI,QAAQ,IAAR,CAAa,4BAA4B,QAAzC,EAAmD,IAAnD;AACJ,YAAI,CAAC,QAAQ,IAAR,CAAa,KAAK,KAAlB,CAAL,EACI,QAAQ,IAAR,CAAa,wCAAwC,QAArD,EAA+D,IAA/D;AACP;;AAED,aAAS,eAAT,CAAyB,SAAzB,EAAoC,YAApC,EAAkD,QAAlD,EAA4D;AACxD,YAAI,SAAS,UAAU,aAAV,CAAwB,eAAe,GAAvC,EAA4C,OAA5C,EAAqD,MAAlE;AACA,YAAI,CAAC,UAAU,IAAV,CAAe,OAAO,CAAP,EAAU,IAAzB,CAAL,EACI,QAAQ,IAAR,CAAa,gCAAgC,QAA7C;AACP;AACJ;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,KAAjC,EAAwC;AACpC,QAAI,UAAU,OAAO,yBAArB;AACA,QAAI,OAAO,GAAG,WAAH,CAAe,OAAf,CAAX;AACA,QAAI,cAAc,GAAG,WAAH,CAAe,GAAf,CAAlB;AACA,QAAI,QAAQ,UAAZ;;AAEA;AACA;;AAEA,SAAK,OAAL,CAAa,UAAS,OAAT,EAAkB;AAC3B,YAAI,IAAI,QAAQ,WAAR,GAAsB,KAAtB,CAA4B,GAA5B,CAAR;AACA,YAAI,CAAC,EAAE,CAAF,CAAL,EACI;AACJ,YAAI,QAAJ;AACA,YAAI,MAAM,OAAN,CAAc,EAAE,CAAF,CAAd,KAAuB,CAAC,CAA5B,EACI,WAAW,EAAE,CAAF,CAAX,CADJ,KAEK,IAAI,MAAM,OAAN,CAAc,EAAE,CAAF,CAAd,KAAuB,CAAC,CAA5B,EACD,WAAW,EAAE,CAAF,CAAX,CADC,KAGD,WAAW,EAAC,OAAO,MAAR,EAAgB,KAAK,OAArB,GAA8B,EAAE,CAAF,CAA9B,CAAX;;AAEJ,YAAI,SAAS,MAAM,MAAf,IAAyB,MAAM,OAAN,CAAc,QAAd,KAA2B,CAAC,CAAzD,EACI;;AAEJ,YAAI,aAAa,MAAM,SAAN,GAAkB,QAAlB,GAA6B,OAA9C;AACA,YAAI;AACA,gBAAI,YAAY,QAAQ,UAAR,CAAhB;AACH,SAFD,CAEE,OAAM,CAAN,EAAS,CAAE;AACb,YAAI,aAAa,CAAC,KAAlB,EAAyB;AACrB,gBAAI,UAAU,UAAU,GAAV,CAAc,UAAS,CAAT,EAAY;AACpC,oBAAI,EAAE,MAAF,GAAW,CAAX,IAAgB,OAAO,EAAE,EAAE,MAAF,GAAW,CAAb,CAAP,IAA0B,QAA9C,EACI,OAAO,EAAE,EAAE,MAAF,GAAW,CAAb,CAAP;AACJ,uBAAO,EAAE,KAAF,CAAQ,CAAR,EAAW,GAAX,CAAe,UAAS,GAAT,EAAc;AAChC,2BAAO,IAAI,CAAJ,CAAP;AACH,iBAFM,EAEJ,IAFI,CAEC,EAFD,CAAP;AAGH,aANa,EAMX,IANW,CAMN,IANM,CAAd;AAOH;;AAED,YAAI,WAAW,UAAU,QAAV,GAAqB,MAApC;AACA,YAAI,YAAY,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAvC,EAA0C;AACtC,uBAAW,MAAM,QAAjB;AACH,SAFD,MAEO;AACH,uBAAW,UAAU,GAAV,GAAgB,OAA3B;AACA;AACH;AACD,YAAI,OAAO,WAAU,GAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAArB;;AAEA,YAAI;AACA,gBAAI,OAAO,QAAQ,QAAQ,QAAhB,EAA0B,IAArC;AACH,SAFD,CAEE,OAAM,CAAN,EAAS;AACP,oBAAQ,IAAR,CAAa,sBAAsB,QAAnC,EAA6C,CAA7C,EAAgD,CAAhD;AACA;AACH;AACD,gBAAQ,GAAR,CAAY,QAAZ;AACA,YAAI,YAAY,IAAI,IAAJ,GAAW,YAAX,EAAhB;;AAEA,YAAI,QAAQ,OAAZ;AACA,YAAI,OAAO,KAAK,KAAL,CAAW,YAAX,EAAyB,GAAzB,CAA6B,UAAS,IAAT,EAAe;AACnD,gBAAI,OAAO,UAAU,aAAV,CAAwB,IAAxB,EAA8B,KAA9B,CAAX;AACA,gBAAI,MAAM,EAAV;AACA,gBAAI,IAAJ,CAAS,KAAK,SAAL,CAAe,KAAK,KAApB,CAAT;AACA,gBAAI,gBAAgB,EAApB;AACA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,UAAS,CAAT,EAAY;AAC5B,iCAAiB,EAAE,KAAnB;AACA,oBAAI,IAAJ,CAAS,KAAK,SAAL,CAAe,CAAC,EAAE,IAAH,EAAS,EAAE,KAAX,CAAf,CAAT;AACH,aAHD;AAIA,gBAAI,iBAAiB,IAArB,EACI,IAAI,IAAJ,CAAS,KAAK,SAAL,CAAe,IAAf,CAAT;AACJ,oBAAQ,KAAK,KAAb;AACA,mBAAO,IAAI,IAAJ,CAAS,OAAT,CAAP;AACH,SAbU,CAAX;;AAeA,YAAI,UAAU,YAAY,KAAK,IAAL,CAAU,YAAV,CAAZ,GAAsC,MAApD;;AAEA,YAAI,aAAa,KAAK,SAAL,CAAe,KAAK,KAAL,CAAW,OAAX,CAAf,KAAuC,KAAK,SAAL,CAAe,SAAf,CAAxD,EACI;;AAEJ,WAAG,aAAH,CAAiB,UAAjB,EAA6B,OAA7B,EAAsC,MAAtC;AACH,KArED;AAsEH;;AAED,SAAS,IAAT,CAAc,OAAd,EAAuB;AACnB,QAAI,QAAQ,GAAG,WAAH,CAAe,GAAf,EAAoB,GAApB,CAAwB,UAAS,CAAT,EAAY;AAC5C,eAAO,CAAC,EAAE,KAAF,CAAQ,kBAAR,KAA+B,EAAhC,EAAoC,CAApC,CAAP;AACH,KAFW,EAET,MAFS,CAEF,UAAS,CAAT,EAAW;AAAC,eAAO,CAAC,CAAC,CAAT;AAAW,KAFrB,CAAZ;;AAIA,SAAK,IAAI,IAAI,KAAK,GAAL,CAAS,CAAT,EAAY,WAAS,CAArB,CAAb,EAAsC,IAAI,MAAM,MAAhD,EAAwD,GAAxD;AACI,iBAAS,MAAM,CAAN,CAAT,EAAmB,CAAnB;AADJ,KAGA,QAAQ,GAAR,CAAY,aAAe,QAAf,GAA0B,SAAtC;AACH;AACD,SAAS,QAAT,CAAkB,QAAlB,EAA4B,CAA5B,EAA+B;AAC3B,YAAQ,GAAR,CAAY,UAAU,IAAE,CAAZ,EAAe,CAAf,IAAoB,qBAApB,GAA8C,QAA9C,GAAyD,SAArE;;AAEA,QAAI,OAAO,GAAG,YAAH,CAAgB,MAAM,SAAN,GAAkB,QAAlB,GAA6B,OAA7C,EAAsD,MAAtD,CAAX;AACA,QAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAX;AACA,QAAI,OAAO,QAAQ,QAAQ,QAAhB,EAA0B,IAArC;AACA,QAAI,YAAY,IAAI,IAAJ,GAAW,YAAX,EAAhB;;AAEA,QAAI,QAAQ,OAAZ;AACA,SAAK,OAAL,CAAa,UAAS,QAAT,EAAmB;AAC5B,iBAAS,MAAT,GAAkB,EAAlB;AACA,iBAAS,KAAT,GAAiB,EAAjB;AACA,iBAAS,KAAT,GAAiB,SAAS,KAAT,EAAjB;AACA,YAAI,OAAO,IAAX;AACA,YAAI,OAAO,SAAS,SAAS,MAAT,GAAkB,CAA3B,CAAP,IAAwC,QAA5C,EACI,OAAO,SAAS,GAAT,EAAP;AACJ,iBAAS,OAAT,CAAiB,UAAS,CAAT,EAAY;AACzB,qBAAS,KAAT,CAAe,IAAf,CAAoB,EAAE,CAAF,CAApB;AACA,qBAAS,MAAT,CAAgB,IAAhB,CAAqB,EAAE,CAAF,CAArB;AACH,SAHD;AAIA,YAAI,OAAO,IAAP,IAAe,QAAnB,EACI,OAAO,SAAS,MAAT,CAAgB,IAAhB,CAAqB,EAArB,CAAP;;AAEJ,YAAI,SAAS,UAAU,aAAV,CAAwB,IAAxB,EAA8B,KAA9B,CAAb;AACA,YAAI,SAAS,OAAO,MAAP,CAAc,GAAd,CAAkB,UAAS,CAAT,EAAY;AAAC,mBAAO,EAAE,KAAT;AAAgB,SAA/C,CAAb;AACA,YAAI,QAAQ,OAAO,MAAP,CAAc,GAAd,CAAkB,UAAS,CAAT,EAAY;AAAC,mBAAO,EAAE,IAAT;AAAe,SAA9C,CAAZ;;AAEA,YAAI,MAAM,UAAU,CAChB,KAAK,SAAL,CAAe,SAAS,KAAxB,CADgB,EACgB,KAAK,SAAL,CAAe,OAAO,KAAtB,CADhB,EAEhB,SAAS,KAFO,EAEA,KAFA,EAGhB,SAAS,MAHO,EAGC,MAHD,CAAV,CAAV;;AAKA,YAAI,GAAJ,EAAS;AACL,oBAAQ,GAAR,CAAY,IAAZ;AACA,kBAAM,OAAN;AACH;;AAED,gBAAQ,OAAO,KAAf;AACH,KA7BD;AA8BH;AACD,SAAS,SAAT,CAAmB,CAAnB,EAAsB;AAClB,QAAI,GAAJ;AACA,QAAI,EAAE,CAAF,IAAO,EAAP,KAAc,EAAE,CAAF,IAAO,EAAzB,EAA6B;AACzB,gBAAQ,GAAR,CAAY,EAAE,CAAF,CAAZ,EAAiB,EAAE,CAAF,CAAjB;AACA,cAAM,CAAN;AACH;;AAED,QAAK,EAAE,CAAF,IAAO,EAAP,KAAc,EAAE,CAAF,IAAO,EAArB,IAA2B,EAAE,CAAF,IAAO,EAAP,KAAc,EAAE,CAAF,IAAO,EAArD,EAAyD;AACrD,kBAAU,EAAE,CAAF,CAAV,EAAe,EAAE,CAAF,CAAf;AACA,kBAAU,EAAE,CAAF,CAAV,EAAe,EAAE,CAAF,CAAf;AACA,cAAM,CAAN;AACH;AACD,WAAO,GAAP;AACH;AACD,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACvB,QAAI,IAAI,KAAK,GAAL,CAAS,GAAG,MAAZ,EAAoB,GAAG,MAAvB,CAAR;AACA,QAAI,MAAM,EAAV;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AACxB,YAAI,IAAJ,CAAS,IAAT,EAAe,UAAU,IAAE,CAAZ,EAAe,CAAf,CAAf,EAAkC,IAAlC;AACA,YAAI,GAAG,CAAH,MAAU,GAAG,CAAH,CAAd,EACI,IAAI,IAAJ,CAAS,UAAT,EAAuB,GAAG,CAAH,CAAvB,EAA8B,qBAA9B,EAAyD,GAAG,CAAH,CAAzD,EAAgE,SAAhE,EADJ,KAGI,IAAI,IAAJ,CAAS,GAAG,CAAH,CAAT;AACP;AACD,YAAQ,GAAR,CAAY,IAAI,IAAJ,CAAS,EAAT,CAAZ;AACH;AACD,SAAS,SAAT,CAAmB,GAAnB,EAAwB,MAAxB,EAAgC;AAC5B,WAAO,CAAC,WAAW,GAAZ,EAAiB,KAAjB,CAAuB,CAAC,MAAxB,CAAP;AACH;;AAED;AACA,IAAI,MAAM,QAAQ,IAAR,CAAa,CAAb,CAAV;AACA,IAAI,CAAC,GAAL,EAAU;AACN;AACA;AACH,CAHD,MAGO,IAAI,YAAY,IAAZ,CAAiB,GAAjB,CAAJ,EACH,iBAAiB,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAjB,EADG,KAEF,IAAI,cAAc,IAAd,CAAmB,GAAnB,CAAJ,EACD,WAAW,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAX,EADC,KAEA,IAAI,MAAM,IAAN,CAAW,GAAX,CAAJ,EACD,KAAK,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAT,EAAyB,EAAzB,KAAgC,CAArC,EADC,KAGD,SAAS,GAAT,EAAc,CAAC,CAAf","file":"highlight_rules_test-compiled.js","sourcesContent":["var fs = require(\"fs\");\nvar path = require(\"path\");\nif (!fs.existsSync)\n    fs.existsSync = path.existsSync;\n\nrequire(\"amd-loader\");\n\nvar cwd = __dirname + \"/\";\nvar root = path.normalize(cwd + Array(5).join(\"../\"));\n\nfunction jsFileList(path, filter) {\n    if (!filter) filter = /_test/;\n    return fs.readdirSync(path).map(function(x) {\n        if (x.slice(-3) == \".js\" && !filter.test(x) && !/\\s/.test(x))\n            return x.slice(0, -3);\n    }).filter(Boolean);\n}\n\nfunction modeList() {\n    return jsFileList(cwd + \"../\", /_highlight_rules|_test|_worker|xml_util|_outdent|behaviour|completions/);\n}\n\nfunction checkModes() {\n    modeList().forEach(function(modeName, i) {\n        console.log(padNumber(i+1, 3) + \") check: \\u001b[33m\" + modeName + \"\\u001b[0m\");\n        try {\n            var Mode = require(\"../\" + modeName).Mode;\n        } catch(e) {\n            console.warn(\"Can't load mode :\" + modeName, e);\n            return;\n        }\n        var m = new Mode();\n        if (!(\"lineCommentStart\" in m) && !(\"blockComment\" in m))\n            console.warn(\"missing comment in \" + modeName);\n        if (!m.$id)\n            console.warn(\"missing id in \" + modeName);\n        var tokenizer = (new Mode).getTokenizer();\n        \n        testComments(m.lineCommentStart, testLineComment, tokenizer, modeName);\n        testComments(m.blockComment, testBlockComment, tokenizer, modeName);\n    });\n    \n    function testComments(desc, fn, tokenizer, modeName) {\n        if (desc) {\n            if (Array.isArray(desc)) {\n                desc.forEach(function(x) {\n                    fn(tokenizer, x, modeName)\n                });\n            } else {\n                fn(tokenizer, desc, modeName)\n            }\n        }\n    }\n    \n    function testBlockComment(tokenizer, blockComment, modeName) {\n        if (blockComment.lineStartOnly)\n            return; // TODO test \n        var str = blockComment.start + \" \" + blockComment.end;\n        str = blockComment.start + str;\n        if (blockComment.nestable)\n            str += blockComment.end;     \n        var data = tokenizer.getLineTokens(str, \"start\");\n        var isBroken = data.tokens.some(function(t) { return !/comment/.test(t.type) });\n        if (isBroken)\n            console.warn(\"broken blockComment in \" + modeName, data);\n        if (!/start/.test(data.state))\n            console.warn(\"broken state after blockComment in \" + modeName, data);\n    }\n    \n    function testLineComment(tokenizer, commentStart, modeName) {\n        var tokens = tokenizer.getLineTokens(commentStart + \" \", \"start\").tokens;\n        if (!/comment/.test(tokens[0].type))\n            console.warn(\"broken lineCommentStart in \" + modeName);\n    }\n}\n\nfunction generateTestData(names, force) {\n    var docRoot = root + \"/demo/kitchen-sink/docs\";\n    var docs = fs.readdirSync(docRoot);\n    var specialDocs = fs.readdirSync(cwd);\n    var modes = modeList();\n\n    // console.log(\"Docs:\", docs);\n    // console.log(\"Modes:\", modes);\n\n    docs.forEach(function(docName) {\n        var p = docName.toLowerCase().split(\".\");\n        if (!p[1])\n            return;\n        var modeName;\n        if (modes.indexOf(p[0]) != -1)\n            modeName = p[0];\n        else if (modes.indexOf(p[1]) != -1)\n            modeName = p[1];\n        else\n            modeName = {\"txt\": \"text\", cpp: \"c_cpp\"}[p[1]];\n\n        if (names && names.length && names.indexOf(modeName) == -1)\n            return;\n        \n        var outputPath = cwd + \"tokens_\" + modeName + \".json\";\n        try {\n            var oldOutput = require(outputPath);\n        } catch(e) {}\n        if (oldOutput && !force) {\n            var oldText = oldOutput.map(function(x) {\n                if (x.length > 1 && typeof x[x.length - 1] == \"string\")\n                    return x[x.length - 1];\n                return x.slice(1).map(function(tok) {\n                    return tok[1];\n                }).join(\"\");\n            }).join(\"\\n\");\n        }\n        \n        var filePath = \"text_\" + modeName + \".txt\";\n        if (specialDocs.indexOf(filePath) !== -1) {\n            filePath = cwd + filePath;\n        } else {\n            filePath = docRoot + \"/\" + docName;\n            // oldText = \"\";\n        }\n        var text = oldText ||fs.readFileSync(filePath, \"utf8\");\n        \n        try {\n            var Mode = require(\"../\" + modeName).Mode;\n        } catch(e) {\n            console.warn(\"Can't load mode :\" + modeName, p, e);\n            return;\n        }\n        console.log(modeName);\n        var tokenizer = new Mode().getTokenizer();\n\n        var state = \"start\";\n        var data = text.split(/\\r\\n|\\r|\\n/).map(function(line) {\n            var data = tokenizer.getLineTokens(line, state);\n            var tmp = [];\n            tmp.push(JSON.stringify(data.state));\n            var tokenizedLine = \"\";\n            data.tokens.forEach(function(x) {\n                tokenizedLine += x.value;\n                tmp.push(JSON.stringify([x.type, x.value]));\n            });\n            if (tokenizedLine != line)\n                tmp.push(JSON.stringify(line));\n            state = data.state;\n            return tmp.join(\",\\n  \");\n        });\n        \n        var jsonStr = \"[[\\n   \" + data.join(\"\\n],[\\n   \") + \"\\n]]\";\n        \n        if (oldOutput && JSON.stringify(JSON.parse(jsonStr)) == JSON.stringify(oldOutput))\n            return;\n        \n        fs.writeFileSync(outputPath, jsonStr, \"utf8\");\n    });\n}\n\nfunction test(startAt) {\n    var modes = fs.readdirSync(cwd).map(function(x) {\n        return (x.match(/tokens_(.*).json/) || {})[1];\n    }).filter(function(x){return !!x});\n\n    for (var i = Math.max(0, startAt||0); i < modes.length; i++)\n        testMode(modes[i], i);\n\n    console.log(\"\\u001b[32m\" + \"all ok\" + \"\\u001b[0m\");\n}\nfunction testMode(modeName, i) {\n    console.log(padNumber(i+1, 3) + \") testing: \\u001b[33m\" + modeName + \"\\u001b[0m\");\n\n    var text = fs.readFileSync(cwd + \"tokens_\" + modeName + \".json\", \"utf8\");\n    var data = JSON.parse(text);\n    var Mode = require(\"../\" + modeName).Mode;\n    var tokenizer = new Mode().getTokenizer();\n\n    var state = \"start\";\n    data.forEach(function(lineData) {\n        lineData.values = [];\n        lineData.types = [];\n        lineData.state = lineData.shift();\n        var line = null;\n        if (typeof lineData[lineData.length - 1] == \"string\")\n            line = lineData.pop();\n        lineData.forEach(function(x) {\n            lineData.types.push(x[0]);\n            lineData.values.push(x[1]);\n        });\n        if (typeof line != \"string\")\n            line = lineData.values.join(\"\");\n\n        var tokens = tokenizer.getLineTokens(line, state);\n        var values = tokens.tokens.map(function(x) {return x.value;});\n        var types = tokens.tokens.map(function(x) {return x.type;});\n\n        var err = testEqual([\n            JSON.stringify(lineData.state), JSON.stringify(tokens.state),\n            lineData.types, types,\n            lineData.values, values]);\n        \n        if (err) {\n            console.log(line);\n            throw \"error\";\n        }\n\n        state = tokens.state;\n    });\n}\nfunction testEqual(a) {\n    var err;\n    if (a[0] + \"\" !== a[1] + \"\") {\n        console.log(a[0],a[1]);\n        err = 1;\n    }\n\n    if ( a[2] + \"\" !== a[3] + \"\" || a[4] + \"\" !== a[5] + \"\") {\n        arrayDiff(a[2],a[3]);\n        arrayDiff(a[4],a[5]);\n        err = 1;\n    }\n    return err;\n}\nfunction arrayDiff(a1, a2) {\n    var l = Math.max(a1.length, a2.length);\n    var out = [];\n    for (var i = 0; i < l; i++) {\n        out.push(\"\\n\", padNumber(i+1, 3), \") \");\n        if (a1[i] !== a2[i])\n            out.push(\"\\u001b[31m\", a1[i], \"\\u001b[0m != \\u001b[32m\", a2[i], \"\\u001b[0m\");\n        else\n            out.push(a1[i]);\n    }\n    console.log(out.join(\"\"));\n}\nfunction padNumber(num, digits) {\n    return (\"      \" + num).slice(-digits);\n}\n\n// cli\nvar arg = process.argv[2];\nif (!arg) {\n    test();\n    checkModes();\n} else if (/--?g(en)?/.test(arg))\n    generateTestData(process.argv.splice(3));\nelse if (/--?c(heck)?/.test(arg))\n    checkModes(process.argv.splice(3));\nelse if (/\\d+/.test(arg))\n    test(parseInt(process.argv[2],10) || 0);\nelse\n    testMode(arg, -1);"]}
{"version":3,"sources":["drools.js"],"names":[],"mappings":";;AAAA,OAAO,UAAS,OAAT,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC;AAC1C;;AAEA,QAAI,MAAM,QAAQ,eAAR,CAAV;AACA,QAAI,QAAQ,QAAQ,aAAR,EAAuB,KAAnC;AACA,QAAI,eAAe,QAAQ,aAAR,EAAuB,QAA1C;AACA,QAAI,gBAAgB,QAAQ,sBAAR,EAAgC,aAApD;;AAEA,QAAI,WAAW,QAAQ,QAAR,GAAmB,YAAW,CAAE,CAA/C;AACA,QAAI,QAAJ,CAAa,QAAb,EAAuB,YAAvB;;AAEA,KAAC,YAAW;;AAER;AACA,aAAK,kBAAL,GAA0B,oCAA1B;AACA,aAAK,iBAAL,GAAyB,SAAzB;;AAEA,aAAK,kBAAL,GAA0B,UAAS,OAAT,EAAkB,SAAlB,EAA6B,GAA7B,EAAkC;AACxD,gBAAI,OAAO,QAAQ,OAAR,CAAgB,GAAhB,CAAX;AACA,gBAAI,QAAQ,KAAK,KAAL,CAAW,KAAK,kBAAhB,CAAZ;AACA,gBAAI,KAAJ,EAAW;AACP,oBAAI,IAAI,MAAM,KAAd;;AAEA,oBAAI,MAAM,CAAN,CAAJ,EAAc;AACV,wBAAI,WAAW,EAAC,KAAK,GAAN,EAAW,QAAQ,KAAK,MAAxB,EAAf;AACA,wBAAI,WAAW,IAAI,aAAJ,CAAkB,OAAlB,EAA2B,SAAS,GAApC,EAAyC,SAAS,MAAlD,CAAf;AACA,wBAAI,OAAO,KAAX;AACA,wBAAI,QAAQ,SAAS,eAAT,EAAZ;AACA,wBAAI,MAAM,KAAN,IAAe,MAAnB,EAA2B;AACvB,+BAAO,MAAP;AACH;AACD,2BAAO,KAAP,EAAc;AACV,4BAAI,MAAM,KAAN,IAAe,IAAnB,EAAyB;AACrB,mCAAO,MAAM,UAAN,CAAiB,QAAjB,EAA2B;AAC9B,qCAAK,SAAS,kBAAT,EADyB;AAE9B,wCAAQ,SAAS,qBAAT;AAFsB,6BAA3B,CAAP;AAIH;AACD,gCAAQ,SAAS,WAAT,EAAR;AACH;AACJ;AAEJ;AACD;AACH,SA3BD;AA6BH,KAnCD,EAmCG,IAnCH,CAmCQ,SAAS,SAnCjB;AAqCC,CAhDD","file":"drools-compiled.js","sourcesContent":["define(function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    // regular expressions that identify starting and stopping points\n    this.foldingStartMarker = /\\b(rule|declare|query|when|then)\\b/; \n    this.foldingStopMarker = /\\bend\\b/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1]) {\n                var position = {row: row, column: line.length};\n                var iterator = new TokenIterator(session, position.row, position.column);\n                var seek = \"end\";\n                var token = iterator.getCurrentToken();\n                if (token.value == \"when\") {\n                    seek = \"then\";\n                }\n                while (token) {\n                    if (token.value == seek) { \n                        return Range.fromPoints(position ,{\n                            row: iterator.getCurrentTokenRow(),\n                            column: iterator.getCurrentTokenColumn()\n                        });\n                    }\n                    token = iterator.stepForward();\n                }\n            }\n\n        }\n        // test each line, and return a range of segments to collapse\n    }\n\n}).call(FoldMode.prototype);\n\n});"]}
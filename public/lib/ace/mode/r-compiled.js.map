{"version":3,"sources":["r.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAO,UAAS,OAAT,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC;AACvC;;AAEA,OAAI,QAAQ,QAAQ,UAAR,EAAoB,KAAhC;AACA,OAAI,MAAM,QAAQ,YAAR,CAAV;AACA,OAAI,WAAW,QAAQ,QAAR,EAAkB,IAAjC;AACA,OAAI,qBAAqB,QAAQ,wBAAR,EAAkC,kBAA3D;AACA,OAAI,kBAAkB,QAAQ,qBAAR,EAA+B,eAArD;AACA,OAAI,uBAAuB,QAAQ,0BAAR,EAAoC,oBAA/D;;AAEA,OAAI,OAAO,SAAP,IAAO,GAAU;AAClB,WAAK,cAAL,GAAsB,eAAtB;AACA,WAAK,QAAL,GAAgB,IAAI,oBAAJ,EAAhB;AACA,WAAK,UAAL,GAAkB,KAAK,iBAAvB;AACF,IAJD;AAKA,OAAI,QAAJ,CAAa,IAAb,EAAmB,QAAnB;;AAEA,IAAC,YACD;AACG,WAAK,gBAAL,GAAwB,GAAxB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FC,WAAK,GAAL,GAAW,YAAX;AACH,IAhGD,EAgGG,IAhGH,CAgGQ,KAAK,SAhGb;AAiGA,WAAQ,IAAR,GAAe,IAAf;AACF,CAnHD","file":"r-compiled.js","sourcesContent":["/*\n * r.js\n *\n * Copyright (C) 2009-11 by RStudio, Inc.\n *\n * The Initial Developer of the Original Code is\n * Ajax.org B.V.\n * Portions created by the Initial Developer are Copyright (C) 2010\n * the Initial Developer. All Rights Reserved.\n *\n * Distributed under the BSD license:\n *\n * Copyright (c) 2010, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n *\n */\ndefine(function(require, exports, module) {\n   \"use strict\";\n\n   var Range = require(\"../range\").Range;\n   var oop = require(\"../lib/oop\");\n   var TextMode = require(\"./text\").Mode;\n   var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n   var RHighlightRules = require(\"./r_highlight_rules\").RHighlightRules;\n   var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n   var Mode = function(){\n      this.HighlightRules = RHighlightRules;\n      this.$outdent = new MatchingBraceOutdent();\n      this.$behaviour = this.$defaultBehaviour;\n   };\n   oop.inherits(Mode, TextMode);\n\n   (function()\n   {\n      this.lineCommentStart = \"#\";\n      // todo import codeModel from RStudio\n      /*this.tokenRe = new RegExp(\"^[\"\n          + unicode.packages.L\n          + unicode.packages.Mn + unicode.packages.Mc\n          + unicode.packages.Nd\n          + unicode.packages.Pc + \"._]+\", \"g\"\n      );\n\n      this.nonTokenRe = new RegExp(\"^(?:[^\"\n          + unicode.packages.L\n          + unicode.packages.Mn + unicode.packages.Mc\n          + unicode.packages.Nd\n          + unicode.packages.Pc + \"._]|\\s])+\", \"g\"\n      );\n\n      this.$complements = {\n               \"(\": \")\",\n               \"[\": \"]\",\n               '\"': '\"',\n               \"'\": \"'\",\n               \"{\": \"}\"\n            };\n      this.$reOpen = /^[([\"'{]$/;\n      this.$reClose = /^[)\\]\"'}]$/;\n\n      this.getNextLineIndent = function(state, line, tab, tabSize, row)\n      {\n         return this.codeModel.getNextLineIndent(row, line, state, tab, tabSize);\n      };\n\n      this.allowAutoInsert = this.smartAllowAutoInsert;\n\n      this.checkOutdent = function(state, line, input) {\n         if (! /^\\s+$/.test(line))\n            return false;\n\n         return /^\\s*[\\{\\}\\)]/.test(input);\n      };\n\n      this.getIndentForOpenBrace = function(openBracePos)\n      {\n         return this.codeModel.getIndentForOpenBrace(openBracePos);\n      };\n\n      this.autoOutdent = function(state, doc, row) {\n         if (row == 0)\n            return 0;\n\n         var line = doc.getLine(row);\n\n         var match = line.match(/^(\\s*[\\}\\)])/);\n         if (match)\n         {\n            var column = match[1].length;\n            var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n            if (!openBracePos || openBracePos.row == row) return 0;\n\n            var indent = this.codeModel.getIndentForOpenBrace(openBracePos);\n            doc.replace(new Range(row, 0, row, column-1), indent);\n         }\n\n         match = line.match(/^(\\s*\\{)/);\n         if (match)\n         {\n            var column = match[1].length;\n            var indent = this.codeModel.getBraceIndent(row-1);\n            doc.replace(new Range(row, 0, row, column-1), indent);\n         }\n      };\n\n      this.$getIndent = function(line) {\n         var match = line.match(/^(\\s+)/);\n         if (match) {\n            return match[1];\n         }\n\n         return \"\";\n      };\n\n      this.transformAction = function(state, action, editor, session, text) {\n         if (action === 'insertion' && text === \"\\n\") {\n\n            // If newline in a doxygen comment, continue the comment\n            var pos = editor.getSelectionRange().start;\n            var match = /^((\\s*#+')\\s*)/.exec(session.doc.getLine(pos.row));\n            if (match && editor.getSelectionRange().start.column >= match[2].length) {\n               return {text: \"\\n\" + match[1]};\n            }\n         }\n         return false;\n      };*/\n       this.$id = \"ace/mode/r\";\n   }).call(Mode.prototype);\n   exports.Mode = Mode;\n});\n"]}
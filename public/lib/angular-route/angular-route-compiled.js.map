{"version":3,"sources":["angular-route.js"],"names":[],"mappings":";;AAAA;;;;;AAKA,CAAC,UAAS,MAAT,EAAiB,OAAjB,EAA0B;AAAC;;AAE5B;;AAEA;;;;;;AAKA,WAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B;AAC7B,QAAI,QAAQ,GAAR,CAAJ,EAAkB;AAChB,YAAM,OAAO,EAAb;;AAEA,WAAK,IAAI,IAAI,CAAR,EAAW,KAAK,IAAI,MAAzB,EAAiC,IAAI,EAArC,EAAyC,GAAzC,EAA8C;AAC5C,YAAI,CAAJ,IAAS,IAAI,CAAJ,CAAT;AACD;AACF,KAND,MAMO,IAAI,SAAS,GAAT,CAAJ,EAAmB;AACxB,YAAM,OAAO,EAAb;;AAEA,WAAK,IAAI,GAAT,IAAgB,GAAhB,EAAqB;AACnB,YAAI,EAAE,IAAI,MAAJ,CAAW,CAAX,MAAkB,GAAlB,IAAyB,IAAI,MAAJ,CAAW,CAAX,MAAkB,GAA7C,CAAJ,EAAuD;AACrD,cAAI,GAAJ,IAAW,IAAI,GAAJ,CAAX;AACD;AACF;AACF;;AAED,WAAO,OAAO,GAAd;AACD;;AAED;;AAEA;AACA;AACA,MAAI,OAAJ;AACA,MAAI,QAAJ;;AAEA;;;;;;;;;;;;;;;AAeC;AACD,MAAI,gBAAgB,QAAQ,MAAR,CAAe,SAAf,EAA0B,CAAC,IAAD,CAA1B,EACI,QADJ,CACa,QADb,EACuB,cADvB,CAApB;AAAA,MAEI,eAAe,QAAQ,QAAR,CAAiB,SAAjB,CAFnB;;AAIA;;;;;;;;;;;;;;;AAeA,WAAS,cAAT,GAA0B;AACxB,cAAU,QAAQ,OAAlB;AACA,eAAW,QAAQ,QAAnB;;AAEA,aAAS,OAAT,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC;AAC9B,aAAO,QAAQ,MAAR,CAAe,OAAO,MAAP,CAAc,MAAd,CAAf,EAAsC,KAAtC,CAAP;AACD;;AAED,QAAI,SAAS,EAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA,SAAK,IAAL,GAAY,UAAS,IAAT,EAAe,KAAf,EAAsB;AAChC;AACA,UAAI,YAAY,YAAY,KAAZ,CAAhB;AACA,UAAI,QAAQ,WAAR,CAAoB,UAAU,cAA9B,CAAJ,EAAmD;AACjD,kBAAU,cAAV,GAA2B,IAA3B;AACD;AACD,UAAI,QAAQ,WAAR,CAAoB,UAAU,oBAA9B,CAAJ,EAAyD;AACvD,kBAAU,oBAAV,GAAiC,KAAK,oBAAtC;AACD;AACD,aAAO,IAAP,IAAe,QAAQ,MAAR,CACb,SADa,EAEb,QAAQ,WAAW,IAAX,EAAiB,SAAjB,CAFK,CAAf;;AAKA;AACA,UAAI,IAAJ,EAAU;AACR,YAAI,eAAgB,KAAK,KAAK,MAAL,GAAc,CAAnB,MAA0B,GAA3B,GACX,KAAK,MAAL,CAAY,CAAZ,EAAe,KAAK,MAAL,GAAc,CAA7B,CADW,GAEX,OAAO,GAFf;;AAIA,eAAO,YAAP,IAAuB,QAAQ,MAAR,CACrB,EAAC,YAAY,IAAb,EADqB,EAErB,WAAW,YAAX,EAAyB,SAAzB,CAFqB,CAAvB;AAID;;AAED,aAAO,IAAP;AACD,KA3BD;;AA6BA;;;;;;;;;AASA,SAAK,oBAAL,GAA4B,KAA5B;;AAEC;;;;;;;;;;;AAWD,aAAS,UAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAC9B,UAAI,cAAc,KAAK,oBAAvB;AAAA,UACI,MAAM;AACJ,sBAAc,IADV;AAEJ,gBAAQ;AAFJ,OADV;AAAA,UAKI,OAAO,IAAI,IAAJ,GAAW,EALtB;;AAOA,aAAO,KACJ,OADI,CACI,UADJ,EACgB,MADhB,EAEJ,OAFI,CAEI,0BAFJ,EAEgC,UAAS,CAAT,EAAY,KAAZ,EAAmB,GAAnB,EAAwB,MAAxB,EAAgC;AACnE,YAAI,WAAY,WAAW,GAAX,IAAkB,WAAW,IAA9B,GAAsC,GAAtC,GAA4C,IAA3D;AACA,YAAI,OAAQ,WAAW,GAAX,IAAkB,WAAW,IAA9B,GAAsC,GAAtC,GAA4C,IAAvD;AACA,aAAK,IAAL,CAAU,EAAE,MAAM,GAAR,EAAa,UAAU,CAAC,CAAC,QAAzB,EAAV;AACA,gBAAQ,SAAS,EAAjB;AACA,eAAO,MACF,WAAW,EAAX,GAAgB,KADd,IAEH,KAFG,IAGF,WAAW,KAAX,GAAmB,EAHjB,KAIF,QAAQ,OAAR,IAAmB,SAJjB,KAKF,YAAY,EALV,IAMH,GANG,IAOF,YAAY,EAPV,CAAP;AAQD,OAfI,EAgBJ,OAhBI,CAgBI,UAhBJ,EAgBgB,MAhBhB,CAAP;;AAkBA,UAAI,MAAJ,GAAa,IAAI,MAAJ,CAAW,MAAM,IAAN,GAAa,GAAxB,EAA6B,cAAc,GAAd,GAAoB,EAAjD,CAAb;AACA,aAAO,GAAP;AACD;;AAED;;;;;;;;;;;;AAYA,SAAK,SAAL,GAAiB,UAAS,MAAT,EAAiB;AAChC,UAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAS,EAAC,YAAY,MAAb,EAAT;AACD;AACD,WAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB;AACA,aAAO,IAAP;AACD,KAND;;AASA,SAAK,IAAL,GAAY,CAAC,YAAD,EACC,WADD,EAEC,cAFD,EAGC,IAHD,EAIC,WAJD,EAKC,kBALD,EAMC,MAND,EAOR,UAAS,UAAT,EAAqB,SAArB,EAAgC,YAAhC,EAA8C,EAA9C,EAAkD,SAAlD,EAA6D,gBAA7D,EAA+E,IAA/E,EAAqF;;AAEvF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA,UAAI,cAAc,KAAlB;AAAA,UACI,aADJ;AAAA,UAEI,yBAFJ;AAAA,UAGI,SAAS;AACP,gBAAQ,MADD;;AAGP;;;;;;;;;;;AAWA,gBAAQ,kBAAW;AACjB,wBAAc,IAAd;;AAEA,cAAI,oBAAoB;AACtB,8BAAkB,KADI;AAEtB,4BAAgB,SAAS,kBAAT,GAA8B;AAC5C,mBAAK,gBAAL,GAAwB,IAAxB;AACA,4BAAc,KAAd;AACD;AALqB,WAAxB;;AAQA,qBAAW,UAAX,CAAsB,YAAW;AAC/B,yBAAa,iBAAb;AACA,gBAAI,CAAC,kBAAkB,gBAAvB,EAAyC;AAC1C,WAHD;AAID,SA7BM;;AA+BP;;;;;;;;;;;;;AAaA,sBAAc,sBAAS,SAAT,EAAoB;AAChC,cAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAjC,EAA0C;AACxC,wBAAY,QAAQ,MAAR,CAAe,EAAf,EAAmB,KAAK,OAAL,CAAa,MAAhC,EAAwC,SAAxC,CAAZ;AACA,sBAAU,IAAV,CAAe,YAAY,KAAK,OAAL,CAAa,OAAb,CAAqB,YAAjC,EAA+C,SAA/C,CAAf;AACA;AACA,sBAAU,MAAV,CAAiB,SAAjB;AACD,WALD,MAKO;AACL,kBAAM,aAAa,QAAb,EAAuB,iDAAvB,CAAN;AACD;AACF;AArDM,OAHb;;AA2DA,iBAAW,GAAX,CAAe,sBAAf,EAAuC,YAAvC;AACA,iBAAW,GAAX,CAAe,wBAAf,EAAyC,WAAzC;;AAEA,aAAO,MAAP;;AAEA;;AAEA;;;;;;;;;;;AAWA,eAAS,kBAAT,CAA4B,EAA5B,EAAgC,KAAhC,EAAuC;AACrC,YAAI,OAAO,MAAM,IAAjB;AAAA,YACI,SAAS,EADb;;AAGA,YAAI,CAAC,MAAM,MAAX,EAAmB,OAAO,IAAP;;AAEnB,YAAI,IAAI,MAAM,MAAN,CAAa,IAAb,CAAkB,EAAlB,CAAR;AACA,YAAI,CAAC,CAAL,EAAQ,OAAO,IAAP;;AAER,aAAK,IAAI,IAAI,CAAR,EAAW,MAAM,EAAE,MAAxB,EAAgC,IAAI,GAApC,EAAyC,EAAE,CAA3C,EAA8C;AAC5C,cAAI,MAAM,KAAK,IAAI,CAAT,CAAV;;AAEA,cAAI,MAAM,EAAE,CAAF,CAAV;;AAEA,cAAI,OAAO,GAAX,EAAgB;AACd,mBAAO,IAAI,IAAX,IAAmB,GAAnB;AACD;AACF;AACD,eAAO,MAAP;AACD;;AAED,eAAS,YAAT,CAAsB,cAAtB,EAAsC;AACpC,YAAI,YAAY,OAAO,OAAvB;;AAEA,wBAAgB,YAAhB;AACA,oCAA4B,iBAAiB,SAAjB,IAA8B,cAAc,OAAd,KAA0B,UAAU,OAAlE,IACrB,QAAQ,MAAR,CAAe,cAAc,UAA7B,EAAyC,UAAU,UAAnD,CADqB,IAErB,CAAC,cAAc,cAFM,IAEY,CAAC,WAFzC;;AAIA,YAAI,CAAC,yBAAD,KAA+B,aAAa,aAA5C,CAAJ,EAAgE;AAC9D,cAAI,WAAW,UAAX,CAAsB,mBAAtB,EAA2C,aAA3C,EAA0D,SAA1D,EAAqE,gBAAzE,EAA2F;AACzF,gBAAI,cAAJ,EAAoB;AAClB,6BAAe,cAAf;AACD;AACF;AACF;AACF;;AAED,eAAS,WAAT,GAAuB;AACrB,YAAI,YAAY,OAAO,OAAvB;AACA,YAAI,YAAY,aAAhB;;AAEA,YAAI,yBAAJ,EAA+B;AAC7B,oBAAU,MAAV,GAAmB,UAAU,MAA7B;AACA,kBAAQ,IAAR,CAAa,UAAU,MAAvB,EAA+B,YAA/B;AACA,qBAAW,UAAX,CAAsB,cAAtB,EAAsC,SAAtC;AACD,SAJD,MAIO,IAAI,aAAa,SAAjB,EAA4B;AACjC,wBAAc,KAAd;AACA,iBAAO,OAAP,GAAiB,SAAjB;AACA,cAAI,SAAJ,EAAe;AACb,gBAAI,UAAU,UAAd,EAA0B;AACxB,kBAAI,QAAQ,QAAR,CAAiB,UAAU,UAA3B,CAAJ,EAA4C;AAC1C,0BAAU,IAAV,CAAe,YAAY,UAAU,UAAtB,EAAkC,UAAU,MAA5C,CAAf,EAAoE,MAApE,CAA2E,UAAU,MAArF,EACU,OADV;AAED,eAHD,MAGO;AACL,0BAAU,GAAV,CAAc,UAAU,UAAV,CAAqB,UAAU,UAA/B,EAA2C,UAAU,IAAV,EAA3C,EAA6D,UAAU,MAAV,EAA7D,CAAd,EACU,OADV;AAED;AACF;AACF;;AAED,aAAG,IAAH,CAAQ,SAAR,EACE,IADF,CACO,aADP,EAEE,IAFF,CAEO,UAAS,MAAT,EAAiB;AACpB;AACA,gBAAI,cAAc,OAAO,OAAzB,EAAkC;AAChC,kBAAI,SAAJ,EAAe;AACb,0BAAU,MAAV,GAAmB,MAAnB;AACA,wBAAQ,IAAR,CAAa,UAAU,MAAvB,EAA+B,YAA/B;AACD;AACD,yBAAW,UAAX,CAAsB,qBAAtB,EAA6C,SAA7C,EAAwD,SAAxD;AACD;AACF,WAXH,EAWK,UAAS,KAAT,EAAgB;AACjB,gBAAI,cAAc,OAAO,OAAzB,EAAkC;AAChC,yBAAW,UAAX,CAAsB,mBAAtB,EAA2C,SAA3C,EAAsD,SAAtD,EAAiE,KAAjE;AACD;AACF,WAfH;AAgBD;AACF;;AAED,eAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,YAAI,KAAJ,EAAW;AACT,cAAI,SAAS,QAAQ,MAAR,CAAe,EAAf,EAAmB,MAAM,OAAzB,CAAb;AACA,kBAAQ,OAAR,CAAgB,MAAhB,EAAwB,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AAC3C,mBAAO,GAAP,IAAc,QAAQ,QAAR,CAAiB,KAAjB,IACV,UAAU,GAAV,CAAc,KAAd,CADU,GAEV,UAAU,MAAV,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,GAApC,CAFJ;AAGD,WAJD;AAKA,cAAI,WAAW,eAAe,KAAf,CAAf;AACA,cAAI,QAAQ,SAAR,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,mBAAO,WAAP,IAAsB,QAAtB;AACD;AACD,iBAAO,GAAG,GAAH,CAAO,MAAP,CAAP;AACD;AACF;;AAGD,eAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC7B,YAAI,QAAJ,EAAc,WAAd;AACA,YAAI,QAAQ,SAAR,CAAkB,WAAW,MAAM,QAAnC,CAAJ,EAAkD;AAChD,cAAI,QAAQ,UAAR,CAAmB,QAAnB,CAAJ,EAAkC;AAChC,uBAAW,SAAS,MAAM,MAAf,CAAX;AACD;AACF,SAJD,MAIO,IAAI,QAAQ,SAAR,CAAkB,cAAc,MAAM,WAAtC,CAAJ,EAAwD;AAC7D,cAAI,QAAQ,UAAR,CAAmB,WAAnB,CAAJ,EAAqC;AACnC,0BAAc,YAAY,MAAM,MAAlB,CAAd;AACD;AACD,cAAI,QAAQ,SAAR,CAAkB,WAAlB,CAAJ,EAAoC;AAClC,kBAAM,iBAAN,GAA0B,KAAK,OAAL,CAAa,WAAb,CAA1B;AACA,uBAAW,iBAAiB,WAAjB,CAAX;AACD;AACF;AACD,eAAO,QAAP;AACD;;AAGD;;;AAGA,eAAS,UAAT,GAAsB;AACpB;AACA,YAAI,MAAJ,EAAY,KAAZ;AACA,gBAAQ,OAAR,CAAgB,MAAhB,EAAwB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC5C,cAAI,CAAC,KAAD,KAAW,SAAS,mBAAmB,UAAU,IAAV,EAAnB,EAAqC,KAArC,CAApB,CAAJ,EAAsE;AACpE,oBAAQ,QAAQ,KAAR,EAAe;AACrB,sBAAQ,QAAQ,MAAR,CAAe,EAAf,EAAmB,UAAU,MAAV,EAAnB,EAAuC,MAAvC,CADa;AAErB,0BAAY,MAFS,EAAf,CAAR;AAGA,kBAAM,OAAN,GAAgB,KAAhB;AACD;AACF,SAPD;AAQA;AACA,eAAO,SAAS,OAAO,IAAP,KAAgB,QAAQ,OAAO,IAAP,CAAR,EAAsB,EAAC,QAAQ,EAAT,EAAa,YAAW,EAAxB,EAAtB,CAAhC;AACD;;AAED;;;AAGA,eAAS,WAAT,CAAqB,MAArB,EAA6B,MAA7B,EAAqC;AACnC,YAAI,SAAS,EAAb;AACA,gBAAQ,OAAR,CAAgB,CAAC,UAAU,EAAX,EAAe,KAAf,CAAqB,GAArB,CAAhB,EAA2C,UAAS,OAAT,EAAkB,CAAlB,EAAqB;AAC9D,cAAI,MAAM,CAAV,EAAa;AACX,mBAAO,IAAP,CAAY,OAAZ;AACD,WAFD,MAEO;AACL,gBAAI,eAAe,QAAQ,KAAR,CAAc,oBAAd,CAAnB;AACA,gBAAI,MAAM,aAAa,CAAb,CAAV;AACA,mBAAO,IAAP,CAAY,OAAO,GAAP,CAAZ;AACA,mBAAO,IAAP,CAAY,aAAa,CAAb,KAAmB,EAA/B;AACA,mBAAO,OAAO,GAAP,CAAP;AACD;AACF,SAVD;AAWA,eAAO,OAAO,IAAP,CAAY,EAAZ,CAAP;AACD;AACF,KAnbW,CAAZ;AAobD;;AAED,gBAAc,QAAd,CAAuB,cAAvB,EAAuC,oBAAvC;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,WAAS,oBAAT,GAAgC;AAC9B,SAAK,IAAL,GAAY,YAAW;AAAE,aAAO,EAAP;AAAY,KAArC;AACD;;AAED,gBAAc,SAAd,CAAwB,QAAxB,EAAkC,aAAlC;AACA,gBAAc,SAAd,CAAwB,QAAxB,EAAkC,wBAAlC;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;;;;;;;AAOA,gBAAc,OAAd,GAAwB,CAAC,QAAD,EAAW,eAAX,EAA4B,UAA5B,CAAxB;AACA,WAAS,aAAT,CAAuB,MAAvB,EAA+B,aAA/B,EAA8C,QAA9C,EAAwD;AACtD,WAAO;AACL,gBAAU,KADL;AAEL,gBAAU,IAFL;AAGL,gBAAU,GAHL;AAIL,kBAAY,SAJP;AAKL,YAAM,cAAS,KAAT,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,WAAtC,EAAmD;AACrD,YAAI,YAAJ;AAAA,YACI,cADJ;AAAA,YAEI,sBAFJ;AAAA,YAGI,gBAAgB,KAAK,UAHzB;AAAA,YAII,YAAY,KAAK,MAAL,IAAe,EAJ/B;;AAMA,cAAM,GAAN,CAAU,qBAAV,EAAiC,MAAjC;AACA;;AAEA,iBAAS,eAAT,GAA2B;AACzB,cAAI,sBAAJ,EAA4B;AAC1B,qBAAS,MAAT,CAAgB,sBAAhB;AACA,qCAAyB,IAAzB;AACD;;AAED,cAAI,YAAJ,EAAkB;AAChB,yBAAa,QAAb;AACA,2BAAe,IAAf;AACD;AACD,cAAI,cAAJ,EAAoB;AAClB,qCAAyB,SAAS,KAAT,CAAe,cAAf,CAAzB;AACA,mCAAuB,IAAvB,CAA4B,UAAS,QAAT,EAAmB;AAC7C,kBAAI,aAAa,KAAjB,EAAwB,yBAAyB,IAAzB;AACzB,aAFD;AAGA,6BAAiB,IAAjB;AACD;AACF;;AAED,iBAAS,MAAT,GAAkB;AAChB,cAAI,SAAS,OAAO,OAAP,IAAkB,OAAO,OAAP,CAAe,MAA9C;AAAA,cACI,WAAW,UAAU,OAAO,SADhC;;AAGA,cAAI,QAAQ,SAAR,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,gBAAI,WAAW,MAAM,IAAN,EAAf;AACA,gBAAI,UAAU,OAAO,OAArB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAI,QAAQ,YAAY,QAAZ,EAAsB,UAAS,KAAT,EAAgB;AAChD,uBAAS,KAAT,CAAe,KAAf,EAAsB,IAAtB,EAA4B,kBAAkB,QAA9C,EAAwD,IAAxD,CAA6D,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC5F,oBAAI,aAAa,KAAb,IAAsB,QAAQ,SAAR,CAAkB,aAAlB,CAAtB,KACE,CAAC,aAAD,IAAkB,MAAM,KAAN,CAAY,aAAZ,CADpB,CAAJ,EACqD;AACnD;AACD;AACF,eALD;AAMA;AACD,aARW,CAAZ;;AAUA,6BAAiB,KAAjB;AACA,2BAAe,QAAQ,KAAR,GAAgB,QAA/B;AACA,yBAAa,KAAb,CAAmB,oBAAnB;AACA,yBAAa,KAAb,CAAmB,SAAnB;AACD,WAxBD,MAwBO;AACL;AACD;AACF;AACJ;AAlEI,KAAP;AAoED;;AAED;AACA;AACA;AACA;AACA;AACA,2BAAyB,OAAzB,GAAmC,CAAC,UAAD,EAAa,aAAb,EAA4B,QAA5B,CAAnC;AACA,WAAS,wBAAT,CAAkC,QAAlC,EAA4C,WAA5C,EAAyD,MAAzD,EAAiE;AAC/D,WAAO;AACL,gBAAU,KADL;AAEL,gBAAU,CAAC,GAFN;AAGL,YAAM,cAAS,KAAT,EAAgB,QAAhB,EAA0B;AAC9B,YAAI,UAAU,OAAO,OAArB;AAAA,YACI,SAAS,QAAQ,MADrB;;AAGA,iBAAS,IAAT,CAAc,OAAO,SAArB;;AAEA,YAAI,OAAO,SAAS,SAAS,QAAT,EAAT,CAAX;;AAEA,YAAI,QAAQ,UAAZ,EAAwB;AACtB,iBAAO,MAAP,GAAgB,KAAhB;AACA,cAAI,aAAa,YAAY,QAAQ,UAApB,EAAgC,MAAhC,CAAjB;AACA,cAAI,QAAQ,YAAZ,EAA0B;AACxB,kBAAM,QAAQ,YAAd,IAA8B,UAA9B;AACD;AACD,mBAAS,IAAT,CAAc,yBAAd,EAAyC,UAAzC;AACA,mBAAS,QAAT,GAAoB,IAApB,CAAyB,yBAAzB,EAAoD,UAApD;AACD;AACD,cAAM,QAAQ,SAAR,IAAqB,UAA3B,IAAyC,MAAzC;;AAEA,aAAK,KAAL;AACD;AAvBI,KAAP;AAyBD;AAGA,CAziCD,EAyiCG,MAziCH,EAyiCW,OAAO,OAziClB","file":"angular-route-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.11\n * (c) 2010-2017 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* global shallowCopy: true */\n\n/**\n * Creates a shallow copy of an object, an array or a primitive.\n *\n * Assumes that there are no proto properties for objects.\n */\nfunction shallowCopy(src, dst) {\n  if (isArray(src)) {\n    dst = dst || [];\n\n    for (var i = 0, ii = src.length; i < ii; i++) {\n      dst[i] = src[i];\n    }\n  } else if (isObject(src)) {\n    dst = dst || {};\n\n    for (var key in src) {\n      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst || src;\n}\n\n/* global shallowCopy: false */\n\n// There are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).\n// They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.\nvar isArray;\nvar isObject;\n\n/**\n * @ngdoc module\n * @name ngRoute\n * @description\n *\n * # ngRoute\n *\n * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n *\n * <div doc-module-components=\"ngRoute\"></div>\n */\n /* global -ngRouteModule */\nvar ngRouteModule = angular.module('ngRoute', ['ng']).\n                        provider('$route', $RouteProvider),\n    $routeMinErr = angular.$$minErr('ngRoute');\n\n/**\n * @ngdoc provider\n * @name $routeProvider\n * @this\n *\n * @description\n *\n * Used for configuring routes.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n * ## Dependencies\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n */\nfunction $RouteProvider() {\n  isArray = angular.isArray;\n  isObject = angular.isObject;\n\n  function inherit(parent, extra) {\n    return angular.extend(Object.create(parent), extra);\n  }\n\n  var routes = {};\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#when\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain named groups starting with a colon and ending with a star:\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n   *\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\n   *\n   *    * `color: brown`\n   *    * `largecode: code/with/slashes`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n   *      newly created scope or the name of a {@link angular.Module#controller registered\n   *      controller} if passed as a string.\n   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.\n   *      If present, the controller will be published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used by {@link\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, the router\n   *      will wait for them all to be resolved or one to be rejected before the controller is\n   *      instantiated.\n   *      If all the promises are resolved successfully, the values of the resolved promises are\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n   *      fired. If any of the promises are rejected the\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.\n   *      For easier access to the resolved dependencies from the template, the `resolve` map will\n   *      be available on the scope of the route, under `$resolve` (by default) or a custom name\n   *      specified by the `resolveAs` property (see below). This can be particularly useful, when\n   *      working with {@link angular.Module#component components} as route templates.<br />\n   *      <div class=\"alert alert-warning\">\n   *        **Note:** If your scope already contains a property with this name, it will be hidden\n   *        or overwritten. Make sure, you specify an appropriate name for this property, that\n   *        does not collide with other properties on the scope.\n   *      </div>\n   *      The map object is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is\n   *        resolved before its value is injected into the controller. Be aware that\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\n   *\n   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on\n   *      the scope of the route. If omitted, defaults to `$resolve`.\n   *\n   *    - `redirectTo` – `{(string|function())=}` – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`\n   *      or `$location.hash()` changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.\n   */\n  this.when = function(path, route) {\n    //copy original route object to preserve params inherited from proto chain\n    var routeCopy = shallowCopy(route);\n    if (angular.isUndefined(routeCopy.reloadOnSearch)) {\n      routeCopy.reloadOnSearch = true;\n    }\n    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {\n      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;\n    }\n    routes[path] = angular.extend(\n      routeCopy,\n      path && pathRegExp(path, routeCopy)\n    );\n\n    // create redirection for trailing slashes\n    if (path) {\n      var redirectPath = (path[path.length - 1] === '/')\n            ? path.substr(0, path.length - 1)\n            : path + '/';\n\n      routes[redirectPath] = angular.extend(\n        {redirectTo: path},\n        pathRegExp(redirectPath, routeCopy)\n      );\n    }\n\n    return this;\n  };\n\n  /**\n   * @ngdoc property\n   * @name $routeProvider#caseInsensitiveMatch\n   * @description\n   *\n   * A boolean property indicating if routes defined\n   * using this provider should be matched using a case insensitive\n   * algorithm. Defaults to `false`.\n   */\n  this.caseInsensitiveMatch = false;\n\n   /**\n    * @param path {string} path\n    * @param opts {Object} options\n    * @return {?Object}\n    *\n    * @description\n    * Normalizes the given path, returning a regular expression\n    * and the original path.\n    *\n    * Inspired by pathRexp in visionmedia/express/lib/utils.js.\n    */\n  function pathRegExp(path, opts) {\n    var insensitive = opts.caseInsensitiveMatch,\n        ret = {\n          originalPath: path,\n          regexp: path\n        },\n        keys = ret.keys = [];\n\n    path = path\n      .replace(/([().])/g, '\\\\$1')\n      .replace(/(\\/)?:(\\w+)(\\*\\?|[?*])?/g, function(_, slash, key, option) {\n        var optional = (option === '?' || option === '*?') ? '?' : null;\n        var star = (option === '*' || option === '*?') ? '*' : null;\n        keys.push({ name: key, optional: !!optional });\n        slash = slash || '';\n        return ''\n          + (optional ? '' : slash)\n          + '(?:'\n          + (optional ? slash : '')\n          + (star && '(.+?)' || '([^/]+)')\n          + (optional || '')\n          + ')'\n          + (optional || '');\n      })\n      .replace(/([/$*])/g, '\\\\$1');\n\n    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');\n    return ret;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#otherwise\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object|string} params Mapping information to be assigned to `$route.current`.\n   * If called with a string, the value maps to `redirectTo`.\n   * @returns {Object} self\n   */\n  this.otherwise = function(params) {\n    if (typeof params === 'string') {\n      params = {redirectTo: params};\n    }\n    this.when(null, params);\n    return this;\n  };\n\n\n  this.$get = ['$rootScope',\n               '$location',\n               '$routeParams',\n               '$q',\n               '$injector',\n               '$templateRequest',\n               '$sce',\n      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {\n\n    /**\n     * @ngdoc service\n     * @name $route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as defined in the route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override\n     *     the property name, using `resolveAs` in the route definition. See\n     *     {@link ngRoute.$routeProvider $routeProvider} for more info.\n     *\n     * @property {Object} routes Object with all route configuration Objects as its properties.\n     *\n     * @description\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\n     *\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with the\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\n     * {@link ngRoute.$routeParams `$routeParams`} service.\n     *\n     * @example\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\n     * URL, and the `ngView` pulls in the partial.\n     *\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\n     *          deps=\"angular-route.js\" fixBase=\"true\">\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"MainController\">\n     *       Choose:\n     *       <a href=\"Book/Moby\">Moby</a> |\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n     *\n     *       <div ng-view></div>\n     *\n     *       <hr />\n     *\n     *       <pre>$location.path() = {{$location.path()}}</pre>\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     *       <pre>$routeParams = {{$routeParams}}</pre>\n     *     </div>\n     *   </file>\n     *\n     *   <file name=\"book.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *   </file>\n     *\n     *   <file name=\"chapter.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *     Chapter Id: {{params.chapterId}}\n     *   </file>\n     *\n     *   <file name=\"script.js\">\n     *     angular.module('ngRouteExample', ['ngRoute'])\n     *\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\n     *          $scope.$route = $route;\n     *          $scope.$location = $location;\n     *          $scope.$routeParams = $routeParams;\n     *      })\n     *\n     *      .controller('BookController', function($scope, $routeParams) {\n     *          $scope.name = 'BookController';\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *      .controller('ChapterController', function($scope, $routeParams) {\n     *          $scope.name = 'ChapterController';\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *     .config(function($routeProvider, $locationProvider) {\n     *       $routeProvider\n     *        .when('/Book/:bookId', {\n     *         templateUrl: 'book.html',\n     *         controller: 'BookController',\n     *         resolve: {\n     *           // I will cause a 1 second delay\n     *           delay: function($q, $timeout) {\n     *             var delay = $q.defer();\n     *             $timeout(delay.resolve, 1000);\n     *             return delay.promise;\n     *           }\n     *         }\n     *       })\n     *       .when('/Book/:bookId/ch/:chapterId', {\n     *         templateUrl: 'chapter.html',\n     *         controller: 'ChapterController'\n     *       });\n     *\n     *       // configure html5 to get links working on jsfiddle\n     *       $locationProvider.html5Mode(true);\n     *     });\n     *\n     *   </file>\n     *\n     *   <file name=\"protractor.js\" type=\"protractor\">\n     *     it('should load and compile correct template', function() {\n     *       element(by.linkText('Moby: Ch1')).click();\n     *       var content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller: ChapterController/);\n     *       expect(content).toMatch(/Book Id: Moby/);\n     *       expect(content).toMatch(/Chapter Id: 1/);\n     *\n     *       element(by.partialLinkText('Scarlet')).click();\n     *\n     *       content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller: BookController/);\n     *       expect(content).toMatch(/Book Id: Scarlet/);\n     *     });\n     *   </file>\n     * </example>\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeStart\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occur.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * The route change (and the `$location` change that triggered it) can be prevented\n     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\n     * for more details about event object.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeSuccess\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route change has happened successfully.\n     * The `resolve` dependencies are now available in the `current.locals` property.\n     *\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\n     * first route entered.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeError\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeUpdate\n     * @eventType broadcast on root scope\n     * @description\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current/previous route information.\n     */\n\n    var forceReload = false,\n        preparedRoute,\n        preparedRouteIsUpdateOnly,\n        $route = {\n          routes: routes,\n\n          /**\n           * @ngdoc method\n           * @name $route#reload\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\n           * creates new scope and reinstantiates the controller.\n           */\n          reload: function() {\n            forceReload = true;\n\n            var fakeLocationEvent = {\n              defaultPrevented: false,\n              preventDefault: function fakePreventDefault() {\n                this.defaultPrevented = true;\n                forceReload = false;\n              }\n            };\n\n            $rootScope.$evalAsync(function() {\n              prepareRoute(fakeLocationEvent);\n              if (!fakeLocationEvent.defaultPrevented) commitRoute();\n            });\n          },\n\n          /**\n           * @ngdoc method\n           * @name $route#updateParams\n           *\n           * @description\n           * Causes `$route` service to update the current URL, replacing\n           * current route parameters with those specified in `newParams`.\n           * Provided property names that match the route's path segment\n           * definitions will be interpolated into the location's path, while\n           * remaining properties will be treated as query params.\n           *\n           * @param {!Object<string, string>} newParams mapping of URL parameter names to values\n           */\n          updateParams: function(newParams) {\n            if (this.current && this.current.$$route) {\n              newParams = angular.extend({}, this.current.params, newParams);\n              $location.path(interpolate(this.current.$$route.originalPath, newParams));\n              // interpolate modifies newParams, only query params are left\n              $location.search(newParams);\n            } else {\n              throw $routeMinErr('norout', 'Tried updating route when with no current route');\n            }\n          }\n        };\n\n    $rootScope.$on('$locationChangeStart', prepareRoute);\n    $rootScope.$on('$locationChangeSuccess', commitRoute);\n\n    return $route;\n\n    /////////////////////////////////////////////////////\n\n    /**\n     * @param on {string} current url\n     * @param route {Object} route regexp to match the url against\n     * @return {?Object}\n     *\n     * @description\n     * Check if the route matches the current url.\n     *\n     * Inspired by match in\n     * visionmedia/express/lib/router/router.js.\n     */\n    function switchRouteMatcher(on, route) {\n      var keys = route.keys,\n          params = {};\n\n      if (!route.regexp) return null;\n\n      var m = route.regexp.exec(on);\n      if (!m) return null;\n\n      for (var i = 1, len = m.length; i < len; ++i) {\n        var key = keys[i - 1];\n\n        var val = m[i];\n\n        if (key && val) {\n          params[key.name] = val;\n        }\n      }\n      return params;\n    }\n\n    function prepareRoute($locationEvent) {\n      var lastRoute = $route.current;\n\n      preparedRoute = parseRoute();\n      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route\n          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)\n          && !preparedRoute.reloadOnSearch && !forceReload;\n\n      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {\n        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {\n          if ($locationEvent) {\n            $locationEvent.preventDefault();\n          }\n        }\n      }\n    }\n\n    function commitRoute() {\n      var lastRoute = $route.current;\n      var nextRoute = preparedRoute;\n\n      if (preparedRouteIsUpdateOnly) {\n        lastRoute.params = nextRoute.params;\n        angular.copy(lastRoute.params, $routeParams);\n        $rootScope.$broadcast('$routeUpdate', lastRoute);\n      } else if (nextRoute || lastRoute) {\n        forceReload = false;\n        $route.current = nextRoute;\n        if (nextRoute) {\n          if (nextRoute.redirectTo) {\n            if (angular.isString(nextRoute.redirectTo)) {\n              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)\n                       .replace();\n            } else {\n              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))\n                       .replace();\n            }\n          }\n        }\n\n        $q.when(nextRoute).\n          then(resolveLocals).\n          then(function(locals) {\n            // after route change\n            if (nextRoute === $route.current) {\n              if (nextRoute) {\n                nextRoute.locals = locals;\n                angular.copy(nextRoute.params, $routeParams);\n              }\n              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);\n            }\n          }, function(error) {\n            if (nextRoute === $route.current) {\n              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);\n            }\n          });\n      }\n    }\n\n    function resolveLocals(route) {\n      if (route) {\n        var locals = angular.extend({}, route.resolve);\n        angular.forEach(locals, function(value, key) {\n          locals[key] = angular.isString(value) ?\n              $injector.get(value) :\n              $injector.invoke(value, null, null, key);\n        });\n        var template = getTemplateFor(route);\n        if (angular.isDefined(template)) {\n          locals['$template'] = template;\n        }\n        return $q.all(locals);\n      }\n    }\n\n\n    function getTemplateFor(route) {\n      var template, templateUrl;\n      if (angular.isDefined(template = route.template)) {\n        if (angular.isFunction(template)) {\n          template = template(route.params);\n        }\n      } else if (angular.isDefined(templateUrl = route.templateUrl)) {\n        if (angular.isFunction(templateUrl)) {\n          templateUrl = templateUrl(route.params);\n        }\n        if (angular.isDefined(templateUrl)) {\n          route.loadedTemplateUrl = $sce.valueOf(templateUrl);\n          template = $templateRequest(templateUrl);\n        }\n      }\n      return template;\n    }\n\n\n    /**\n     * @returns {Object} the current active route, by matching it against the URL\n     */\n    function parseRoute() {\n      // Match a route\n      var params, match;\n      angular.forEach(routes, function(route, path) {\n        if (!match && (params = switchRouteMatcher($location.path(), route))) {\n          match = inherit(route, {\n            params: angular.extend({}, $location.search(), params),\n            pathParams: params});\n          match.$$route = route;\n        }\n      });\n      // No route matched; fallback to \"otherwise\" route\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n    }\n\n    /**\n     * @returns {string} interpolation of the redirect path with the parameters\n     */\n    function interpolate(string, params) {\n      var result = [];\n      angular.forEach((string || '').split(':'), function(segment, i) {\n        if (i === 0) {\n          result.push(segment);\n        } else {\n          var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\n          var key = segmentMatch[1];\n          result.push(params[key]);\n          result.push(segmentMatch[2] || '');\n          delete params[key];\n        }\n      });\n      return result.join('');\n    }\n  }];\n}\n\nngRouteModule.provider('$routeParams', $RouteParamsProvider);\n\n\n/**\n * @ngdoc service\n * @name $routeParams\n * @requires $route\n * @this\n *\n * @description\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * The route parameters are a combination of {@link ng.$location `$location`}'s\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\n * Instead you can use `$route.current.params` to access the new route's parameters.\n *\n * @example\n * ```js\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n * ```\n */\nfunction $RouteParamsProvider() {\n  this.$get = function() { return {}; };\n}\n\nngRouteModule.directive('ngView', ngViewFactory);\nngRouteModule.directive('ngView', ngViewFillContentFactory);\n\n\n/**\n * @ngdoc directive\n * @name ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |\n * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |\n *\n * The enter and leave animation occur concurrently.\n *\n * @knownIssue If `ngView` is contained in an asynchronously loaded template (e.g. in another\n *             directive's templateUrl or in a template loaded using `ngInclude`), then you need to\n *             make sure that `$route` is instantiated in time to capture the initial\n *             `$locationChangeStart` event and load the appropriate view. One way to achieve this\n *             is to have it as a dependency in a `.run` block:\n *             `myModule.run(['$route', function() {}]);`\n *\n * @scope\n * @priority 400\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the view is updated.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n *                    as an expression yields a truthy value.\n * @example\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function MainCtrl($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function BookCtrl($routeParams) {\n            this.name = 'BookCtrl';\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function ChapterCtrl($routeParams) {\n            this.name = 'ChapterCtrl';\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller: ChapterCtrl/);\n          expect(content).toMatch(/Book Id: Moby/);\n          expect(content).toMatch(/Chapter Id: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller: BookCtrl/);\n          expect(content).toMatch(/Book Id: Scarlet/);\n        });\n      </file>\n    </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngView#$viewContentLoaded\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.\n */\nngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\nfunction ngViewFactory($route, $anchorScroll, $animate) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    link: function(scope, $element, attr, ctrl, $transclude) {\n        var currentScope,\n            currentElement,\n            previousLeaveAnimation,\n            autoScrollExp = attr.autoscroll,\n            onloadExp = attr.onload || '';\n\n        scope.$on('$routeChangeSuccess', update);\n        update();\n\n        function cleanupLastView() {\n          if (previousLeaveAnimation) {\n            $animate.cancel(previousLeaveAnimation);\n            previousLeaveAnimation = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if (currentElement) {\n            previousLeaveAnimation = $animate.leave(currentElement);\n            previousLeaveAnimation.done(function(response) {\n              if (response !== false) previousLeaveAnimation = null;\n            });\n            currentElement = null;\n          }\n        }\n\n        function update() {\n          var locals = $route.current && $route.current.locals,\n              template = locals && locals.$template;\n\n          if (angular.isDefined(template)) {\n            var newScope = scope.$new();\n            var current = $route.current;\n\n            // Note: This will also link all children of ng-view that were contained in the original\n            // html. If that content contains controllers, ... they could pollute/change the scope.\n            // However, using ng-view on an element with additional content does not make sense...\n            // Note: We can't remove them in the cloneAttchFn of $transclude as that\n            // function is called before linking the content, which would apply child\n            // directives to non existing elements.\n            var clone = $transclude(newScope, function(clone) {\n              $animate.enter(clone, null, currentElement || $element).done(function onNgViewEnter(response) {\n                if (response !== false && angular.isDefined(autoScrollExp)\n                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                  $anchorScroll();\n                }\n              });\n              cleanupLastView();\n            });\n\n            currentElement = clone;\n            currentScope = current.scope = newScope;\n            currentScope.$emit('$viewContentLoaded');\n            currentScope.$eval(onloadExp);\n          } else {\n            cleanupLastView();\n          }\n        }\n    }\n  };\n}\n\n// This directive is called during the $transclude call of the first `ngView` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngView\n// is called.\nngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\nfunction ngViewFillContentFactory($compile, $controller, $route) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    link: function(scope, $element) {\n      var current = $route.current,\n          locals = current.locals;\n\n      $element.html(locals.$template);\n\n      var link = $compile($element.contents());\n\n      if (current.controller) {\n        locals.$scope = scope;\n        var controller = $controller(current.controller, locals);\n        if (current.controllerAs) {\n          scope[current.controllerAs] = controller;\n        }\n        $element.data('$ngControllerController', controller);\n        $element.children().data('$ngControllerController', controller);\n      }\n      scope[current.resolveAs || '$resolve'] = locals;\n\n      link(scope);\n    }\n  };\n}\n\n\n})(window, window.angular);\n"]}
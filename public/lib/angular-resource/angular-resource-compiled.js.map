{"version":3,"sources":["angular-resource.js"],"names":[],"mappings":"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","file":"angular-resource-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.11\n * (c) 2010-2017 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\nvar $resourceMinErr = angular.$$minErr('$resource');\n\n// Helper functions and regex to lookup a dotted path on an object\n// stopping at undefined/null.  The path must be composed of ASCII\n// identifiers (just like $parse)\nvar MEMBER_NAME_REGEX = /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;\n\nfunction isValidDottedPath(path) {\n  return (path != null && path !== '' && path !== 'hasOwnProperty' &&\n      MEMBER_NAME_REGEX.test('.' + path));\n}\n\nfunction lookupDottedPath(obj, path) {\n  if (!isValidDottedPath(path)) {\n    throw $resourceMinErr('badmember', 'Dotted member path \"@{0}\" is invalid.', path);\n  }\n  var keys = path.split('.');\n  for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {\n    var key = keys[i];\n    obj = (obj !== null) ? obj[key] : undefined;\n  }\n  return obj;\n}\n\n/**\n * Create a shallow copy of an object and clear other fields from the destination\n */\nfunction shallowClearAndCopy(src, dst) {\n  dst = dst || {};\n\n  angular.forEach(dst, function(value, key) {\n    delete dst[key];\n  });\n\n  for (var key in src) {\n    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n/**\n * @ngdoc module\n * @name ngResource\n * @description\n *\n * # ngResource\n *\n * The `ngResource` module provides interaction support with RESTful services\n * via the $resource service.\n *\n *\n * <div doc-module-components=\"ngResource\"></div>\n *\n * See {@link ngResource.$resourceProvider} and {@link ngResource.$resource} for usage.\n */\n\n/**\n * @ngdoc provider\n * @name $resourceProvider\n *\n * @description\n *\n * Use `$resourceProvider` to change the default behavior of the {@link ngResource.$resource}\n * service.\n *\n * ## Dependencies\n * Requires the {@link ngResource } module to be installed.\n *\n */\n\n/**\n * @ngdoc service\n * @name $resource\n * @requires $http\n * @requires ng.$log\n * @requires $q\n * @requires ng.$timeout\n *\n * @description\n * A factory which creates a resource object that lets you interact with\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n *\n * The returned resource object has action methods which provide high-level behaviors without\n * the need to interact with the low level {@link ng.$http $http} service.\n *\n * Requires the {@link ngResource `ngResource`} module to be installed.\n *\n * By default, trailing slashes will be stripped from the calculated URLs,\n * which can pose problems with server backends that do not expect that\n * behavior.  This can be disabled by configuring the `$resourceProvider` like\n * this:\n *\n * ```js\n     app.config(['$resourceProvider', function($resourceProvider) {\n       // Don't strip trailing slashes from calculated URLs\n       $resourceProvider.defaults.stripTrailingSlashes = false;\n     }]);\n * ```\n *\n * @param {string} url A parameterized URL template with parameters prefixed by `:` as in\n *   `/user/:username`. If you are using a URL with a port number (e.g.\n *   `http://example.com:8080/api`), it will be respected.\n *\n *   If you are using a url with a suffix, just add the suffix, like this:\n *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\n *   or even `$resource('http://example.com/resource/:resource_id.:format')`\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n *   can escape it with `/\\.`.\n *\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n *   `actions` methods. If a parameter value is a function, it will be called every time\n *   a param value needs to be obtained for a request (unless the param was overridden). The function\n *   will be passed the current data value as an argument.\n *\n *   Each key value in the parameter object is first bound to url template if present and then any\n *   excess keys are appended to the url search query after the `?`.\n *\n *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\n *   URL `/path/greet?salutation=Hello`.\n *\n *   If the parameter value is prefixed with `@`, then the value for that parameter will be\n *   extracted from the corresponding property on the `data` object (provided when calling a\n *   \"non-GET\" action method).\n *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of\n *   `someParam` will be `data.someProp`.\n *   Note that the parameter will be ignored, when calling a \"GET\" action method (i.e. an action\n *   method that does not accept a request body)\n *\n * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend\n *   the default set of resource actions. The declaration should be created in the format of {@link\n *   ng.$http#usage $http.config}:\n *\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\n *        ...}\n *\n *   Where:\n *\n *   - **`action`** – {string} – The name of action. This name becomes the name of the method on\n *     your resource object.\n *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n *     `DELETE`, `JSONP`, etc).\n *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\n *     the parameter value is a function, it will be called every time when a param value needs to\n *     be obtained for a request (unless the param was overridden). The function will be passed the\n *     current data value as an argument.\n *   - **`url`** – {string} – action specific `url` override. The url templating is supported just\n *     like for the resource-level urls.\n *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\n *     see `returns` section.\n *   - **`transformRequest`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     request body and headers and returns its transformed (typically serialized) version.\n *     By default, transformRequest will contain one function that checks if the request data is\n *     an object and serializes it using `angular.toJson`. To prevent this behavior, set\n *     `transformRequest` to an empty array: `transformRequest: []`\n *   - **`transformResponse`** –\n *     `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     response body, headers and status and returns its transformed (typically deserialized)\n *     version.\n *     By default, transformResponse will contain one function that checks if the response looks\n *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,\n *     set `transformResponse` to an empty array: `transformResponse: []`\n *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n *     GET request, otherwise if a cache instance built with\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n *     caching.\n *   - **`timeout`** – `{number}` – timeout in milliseconds.<br />\n *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are\n *     **not** supported in $resource, because the same value would be used for multiple requests.\n *     If you are looking for a way to cancel requests, you should use the `cancellable` option.\n *   - **`cancellable`** – `{boolean}` – if set to true, the request made by a \"non-instance\" call\n *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call's\n *     return value. Calling `$cancelRequest()` for a non-cancellable or an already\n *     completed/cancelled request will have no effect.<br />\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n *     XHR object. See\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\n *     for more information.\n *   - **`responseType`** - `{string}` - see\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\n *     with `http response` object. See {@link ng.$http $http interceptors}.\n *\n * @param {Object} options Hash with custom settings that should extend the\n *   default `$resourceProvider` behavior.  The supported options are:\n *\n *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing\n *   slashes from any calculated URL will be stripped. (Defaults to true.)\n *   - **`cancellable`** – {boolean} – If true, the request made by a \"non-instance\" call will be\n *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.\n *   This can be overwritten per action. (Defaults to false.)\n *\n * @returns {Object} A resource \"class\" object with methods for the default set of resource actions\n *   optionally extended with custom `actions`. The default set contains these actions:\n *   ```js\n *   { 'get':    {method:'GET'},\n *     'save':   {method:'POST'},\n *     'query':  {method:'GET', isArray:true},\n *     'remove': {method:'DELETE'},\n *     'delete': {method:'DELETE'} };\n *   ```\n *\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\n *   destination and parameters. When the data is returned from the server then the object is an\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n *   read, update, delete) on server-side data like this:\n *   ```js\n *   var User = $resource('/user/:userId', {userId:'@id'});\n *   var user = User.get({userId:123}, function() {\n *     user.abc = true;\n *     user.$save();\n *   });\n *   ```\n *\n *   It is important to realize that invoking a $resource object method immediately returns an\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\n *   server the existing reference is populated with the actual data. This is a useful trick since\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\n *   object results in no rendering, once the data arrives from the server then the object is\n *   populated with the data and the view automatically re-renders itself showing the new data. This\n *   means that in most cases one never has to write a callback function for the action methods.\n *\n *   The action methods on the class object or instance object can be invoked with the following\n *   parameters:\n *\n *   - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n *   - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n *\n *\n *   Success callback is called with (value (Object|Array), responseHeaders (Function),\n *   status (number), statusText (string)) arguments, where the value is the populated resource\n *   instance or collection object. The error callback is called with (httpResponse) argument.\n *\n *   Class actions return empty instance (with additional properties below).\n *   Instance actions return promise of the action.\n *\n *   The Resource instances and collections have these additional properties:\n *\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n *     instance or collection.\n *\n *     On success, the promise is resolved with the same resource instance or collection object,\n *     updated with data from server. This makes it easy to use in\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n *     rendering until the resource(s) are loaded.\n *\n *     On failure, the promise is rejected with the {@link ng.$http http response} object, without\n *     the `resource` property.\n *\n *     If an interceptor object was provided, the promise will instead be resolved with the value\n *     returned by the interceptor.\n *\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n *      data-binding.\n *\n *   The Resource instances and collections have these additional methods:\n *\n *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or\n *      collection, calling this method will abort the request.\n *\n *   The Resource instances have these additional methods:\n *\n *   - `toJSON`: It returns a simple object without any of the extra properties added as part of\n *     the Resource API. This object can be serialized through {@link angular.toJson} safely\n *     without attaching Angular-specific fields. Notice that `JSON.stringify` (and\n *     `angular.toJson`) automatically use this method when serializing a Resource instance\n *     (see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior)).\n *\n * @example\n *\n * # Credit card resource\n *\n * ```js\n     // Define CreditCard class\n     var CreditCard = $resource('/user/:userId/card/:cardId',\n      {userId:123, cardId:'@id'}, {\n       charge: {method:'POST', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = \"J. Smith\";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:'0123'});\n     newCard.name = \"Mike Smith\";\n     newCard.$save();\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\n     expect(newCard.id).toEqual(789);\n * ```\n *\n * The object returned from this function execution is a resource \"class\" which has \"static\" method\n * for each action in the definition.\n *\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n * `headers`.\n *\n * @example\n *\n * # User resource\n *\n * When the data is returned from the server then the object is an instance of the resource type and\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\n * operations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n *\n * It's worth noting that the success callback for `get`, `query` and other methods gets passed\n * in the response that came from the server as well as $http header getter function, so one\n * could rewrite the above example and get access to http headers as:\n *\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user, getResponseHeaders){\n       user.abc = true;\n       user.$save(function(user, putResponseHeaders) {\n         //user => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n *\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\n *\n   ```\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n *\n * @example\n *\n * # Creating a custom 'PUT' request\n *\n * In this example we create a custom method on our resource to make a PUT request\n * ```js\n *    var app = angular.module('app', ['ngResource', 'ngRoute']);\n *\n *    // Some APIs expect a PUT request in the format URL/object/ID\n *    // Here we are creating an 'update' method\n *    app.factory('Notes', ['$resource', function($resource) {\n *    return $resource('/notes/:id', null,\n *        {\n *            'update': { method:'PUT' }\n *        });\n *    }]);\n *\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\n *    // We pass in $routeParams and our Notes factory along with $scope\n *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                      function($scope, $routeParams, Notes) {\n *    // First get a note object from the factory\n *    var note = Notes.get({ id:$routeParams.id });\n *    $id = note.id;\n *\n *    // Now call update passing in the ID first then the object you are updating\n *    Notes.update({ id:$id }, note);\n *\n *    // This will PUT /notes/ID with the note object in the request payload\n *    }]);\n * ```\n *\n * @example\n *\n * # Cancelling requests\n *\n * If an action's configuration specifies that it is cancellable, you can cancel the request related\n * to an instance or collection (as long as it is a result of a \"non-instance\" call):\n *\n   ```js\n     // ...defining the `Hotel` resource...\n     var Hotel = $resource('/api/hotel/:id', {id: '@id'}, {\n       // Let's make the `query()` method cancellable\n       query: {method: 'get', isArray: true, cancellable: true}\n     });\n\n     // ...somewhere in the PlanVacationController...\n     ...\n     this.onDestinationChanged = function onDestinationChanged(destination) {\n       // We don't care about any pending request for hotels\n       // in a different destination any more\n       this.availableHotels.$cancelRequest();\n\n       // Let's query for hotels in '<destination>'\n       // (calls: /api/hotel?location=<destination>)\n       this.availableHotels = Hotel.query({location: destination});\n     };\n   ```\n *\n */\nangular.module('ngResource', ['ng']).\n  provider('$resource', function ResourceProvider() {\n    var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\\/\\/[^/]*/;\n\n    var provider = this;\n\n    /**\n     * @ngdoc property\n     * @name $resourceProvider#defaults\n     * @description\n     * Object containing default options used when creating `$resource` instances.\n     *\n     * The default values satisfy a wide range of usecases, but you may choose to overwrite any of\n     * them to further customize your instances. The available properties are:\n     *\n     * - **stripTrailingSlashes** – `{boolean}` – If true, then the trailing slashes from any\n     *   calculated URL will be stripped.<br />\n     *   (Defaults to true.)\n     * - **cancellable** – `{boolean}` – If true, the request made by a \"non-instance\" call will be\n     *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return\n     *   value. For more details, see {@link ngResource.$resource}. This can be overwritten per\n     *   resource class or action.<br />\n     *   (Defaults to false.)\n     * - **actions** - `{Object.<Object>}` - A hash with default actions declarations. Actions are\n     *   high-level methods corresponding to RESTful actions/methods on resources. An action may\n     *   specify what HTTP method to use, what URL to hit, if the return value will be a single\n     *   object or a collection (array) of objects etc. For more details, see\n     *   {@link ngResource.$resource}. The actions can also be enhanced or overwritten per resource\n     *   class.<br />\n     *   The default actions are:\n     *   ```js\n     *   {\n     *     get: {method: 'GET'},\n     *     save: {method: 'POST'},\n     *     query: {method: 'GET', isArray: true},\n     *     remove: {method: 'DELETE'},\n     *     delete: {method: 'DELETE'}\n     *   }\n     *   ```\n     *\n     * #### Example\n     *\n     * For example, you can specify a new `update` action that uses the `PUT` HTTP verb:\n     *\n     * ```js\n     *   angular.\n     *     module('myApp').\n     *     config(['$resourceProvider', function ($resourceProvider) {\n     *       $resourceProvider.defaults.actions.update = {\n     *         method: 'PUT'\n     *       };\n     *     });\n     * ```\n     *\n     * Or you can even overwrite the whole `actions` list and specify your own:\n     *\n     * ```js\n     *   angular.\n     *     module('myApp').\n     *     config(['$resourceProvider', function ($resourceProvider) {\n     *       $resourceProvider.defaults.actions = {\n     *         create: {method: 'POST'},\n     *         get:    {method: 'GET'},\n     *         getAll: {method: 'GET', isArray:true},\n     *         update: {method: 'PUT'},\n     *         delete: {method: 'DELETE'}\n     *       };\n     *     });\n     * ```\n     *\n     */\n    this.defaults = {\n      // Strip slashes by default\n      stripTrailingSlashes: true,\n\n      // Make non-instance requests cancellable (via `$cancelRequest()`)\n      cancellable: false,\n\n      // Default actions configuration\n      actions: {\n        'get': {method: 'GET'},\n        'save': {method: 'POST'},\n        'query': {method: 'GET', isArray: true},\n        'remove': {method: 'DELETE'},\n        'delete': {method: 'DELETE'}\n      }\n    };\n\n    this.$get = ['$http', '$log', '$q', '$timeout', function($http, $log, $q, $timeout) {\n\n      var noop = angular.noop,\n        forEach = angular.forEach,\n        extend = angular.extend,\n        copy = angular.copy,\n        isArray = angular.isArray,\n        isDefined = angular.isDefined,\n        isFunction = angular.isFunction,\n        isNumber = angular.isNumber;\n\n      /**\n       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n       * (pchar) allowed in path segments:\n       *    segment       = *pchar\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n       */\n      function encodeUriSegment(val) {\n        return encodeUriQuery(val, true).\n          replace(/%26/gi, '&').\n          replace(/%3D/gi, '=').\n          replace(/%2B/gi, '+');\n      }\n\n\n      /**\n       * This method is intended for encoding *key* or *value* parts of query component. We need a\n       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n       * have to be encoded per http://tools.ietf.org/html/rfc3986:\n       *    query       = *( pchar / \"/\" / \"?\" )\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n       */\n      function encodeUriQuery(val, pctEncodeSpaces) {\n        return encodeURIComponent(val).\n          replace(/%40/gi, '@').\n          replace(/%3A/gi, ':').\n          replace(/%24/g, '$').\n          replace(/%2C/gi, ',').\n          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n      }\n\n      function Route(template, defaults) {\n        this.template = template;\n        this.defaults = extend({}, provider.defaults, defaults);\n        this.urlParams = {};\n      }\n\n      Route.prototype = {\n        setUrlParams: function(config, params, actionUrl) {\n          var self = this,\n            url = actionUrl || self.template,\n            val,\n            encodedVal,\n            protocolAndDomain = '';\n\n          var urlParams = self.urlParams = {};\n          forEach(url.split(/\\W/), function(param) {\n            if (param === 'hasOwnProperty') {\n              throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.');\n            }\n            if (!(new RegExp('^\\\\d+$').test(param)) && param &&\n              (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url))) {\n              urlParams[param] = {\n                isQueryParamValue: (new RegExp('\\\\?.*=:' + param + '(?:\\\\W|$)')).test(url)\n              };\n            }\n          });\n          url = url.replace(/\\\\:/g, ':');\n          url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {\n            protocolAndDomain = match;\n            return '';\n          });\n\n          params = params || {};\n          forEach(self.urlParams, function(paramInfo, urlParam) {\n            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];\n            if (isDefined(val) && val !== null) {\n              if (paramInfo.isQueryParamValue) {\n                encodedVal = encodeUriQuery(val, true);\n              } else {\n                encodedVal = encodeUriSegment(val);\n              }\n              url = url.replace(new RegExp(':' + urlParam + '(\\\\W|$)', 'g'), function(match, p1) {\n                return encodedVal + p1;\n              });\n            } else {\n              url = url.replace(new RegExp('(/?):' + urlParam + '(\\\\W|$)', 'g'), function(match,\n                  leadingSlashes, tail) {\n                if (tail.charAt(0) === '/') {\n                  return tail;\n                } else {\n                  return leadingSlashes + tail;\n                }\n              });\n            }\n          });\n\n          // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n          if (self.defaults.stripTrailingSlashes) {\n            url = url.replace(/\\/+$/, '') || '/';\n          }\n\n          // then replace collapse `/.` if found in the last URL path segment before the query\n          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n          url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\n          // replace escaped `/\\.` with `/.`\n          config.url = protocolAndDomain + url.replace(/\\/\\\\\\./, '/.');\n\n\n          // set params - delegate param encoding to $http\n          forEach(params, function(value, key) {\n            if (!self.urlParams[key]) {\n              config.params = config.params || {};\n              config.params[key] = value;\n            }\n          });\n        }\n      };\n\n\n      function resourceFactory(url, paramDefaults, actions, options) {\n        var route = new Route(url, options);\n\n        actions = extend({}, provider.defaults.actions, actions);\n\n        function extractParams(data, actionParams) {\n          var ids = {};\n          actionParams = extend({}, paramDefaults, actionParams);\n          forEach(actionParams, function(value, key) {\n            if (isFunction(value)) { value = value(data); }\n            ids[key] = value && value.charAt && value.charAt(0) === '@' ?\n              lookupDottedPath(data, value.substr(1)) : value;\n          });\n          return ids;\n        }\n\n        function defaultResponseInterceptor(response) {\n          return response.resource;\n        }\n\n        function Resource(value) {\n          shallowClearAndCopy(value || {}, this);\n        }\n\n        Resource.prototype.toJSON = function() {\n          var data = extend({}, this);\n          delete data.$promise;\n          delete data.$resolved;\n          delete data.$cancelRequest;\n          return data;\n        };\n\n        forEach(actions, function(action, name) {\n          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);\n          var numericTimeout = action.timeout;\n          var cancellable = isDefined(action.cancellable) ?\n              action.cancellable : route.defaults.cancellable;\n\n          if (numericTimeout && !isNumber(numericTimeout)) {\n            $log.debug('ngResource:\\n' +\n                       '  Only numeric values are allowed as `timeout`.\\n' +\n                       '  Promises are not supported in $resource, because the same value would ' +\n                       'be used for multiple requests. If you are looking for a way to cancel ' +\n                       'requests, you should use the `cancellable` option.');\n            delete action.timeout;\n            numericTimeout = null;\n          }\n\n          Resource[name] = function(a1, a2, a3, a4) {\n            var params = {}, data, success, error;\n\n            switch (arguments.length) {\n              case 4:\n                error = a4;\n                success = a3;\n                // falls through\n              case 3:\n              case 2:\n                if (isFunction(a2)) {\n                  if (isFunction(a1)) {\n                    success = a1;\n                    error = a2;\n                    break;\n                  }\n\n                  success = a2;\n                  error = a3;\n                  // falls through\n                } else {\n                  params = a1;\n                  data = a2;\n                  success = a3;\n                  break;\n                }\n                // falls through\n              case 1:\n                if (isFunction(a1)) success = a1;\n                else if (hasBody) data = a1;\n                else params = a1;\n                break;\n              case 0: break;\n              default:\n                throw $resourceMinErr('badargs',\n                  'Expected up to 4 arguments [params, data, success, error], got {0} arguments',\n                  arguments.length);\n            }\n\n            var isInstanceCall = this instanceof Resource;\n            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\n            var httpConfig = {};\n            var responseInterceptor = action.interceptor && action.interceptor.response ||\n              defaultResponseInterceptor;\n            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||\n              undefined;\n            var timeoutDeferred;\n            var numericTimeoutPromise;\n\n            forEach(action, function(value, key) {\n              switch (key) {\n                default:\n                  httpConfig[key] = copy(value);\n                  break;\n                case 'params':\n                case 'isArray':\n                case 'interceptor':\n                case 'cancellable':\n                  break;\n              }\n            });\n\n            if (!isInstanceCall && cancellable) {\n              timeoutDeferred = $q.defer();\n              httpConfig.timeout = timeoutDeferred.promise;\n\n              if (numericTimeout) {\n                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);\n              }\n            }\n\n            if (hasBody) httpConfig.data = data;\n            route.setUrlParams(httpConfig,\n              extend({}, extractParams(data, action.params || {}), params),\n              action.url);\n\n            var promise = $http(httpConfig).then(function(response) {\n              var data = response.data;\n\n              if (data) {\n                // Need to convert action.isArray to boolean in case it is undefined\n                if (isArray(data) !== (!!action.isArray)) {\n                  throw $resourceMinErr('badcfg',\n                      'Error in resource configuration for action `{0}`. Expected response to ' +\n                      'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',\n                    isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);\n                }\n                if (action.isArray) {\n                  value.length = 0;\n                  forEach(data, function(item) {\n                    if (typeof item === 'object') {\n                      value.push(new Resource(item));\n                    } else {\n                      // Valid JSON values may be string literals, and these should not be converted\n                      // into objects. These items will not have access to the Resource prototype\n                      // methods, but unfortunately there\n                      value.push(item);\n                    }\n                  });\n                } else {\n                  var promise = value.$promise;     // Save the promise\n                  shallowClearAndCopy(data, value);\n                  value.$promise = promise;         // Restore the promise\n                }\n              }\n              response.resource = value;\n\n              return response;\n            }, function(response) {\n              (error || noop)(response);\n              return $q.reject(response);\n            });\n\n            promise['finally'](function() {\n              value.$resolved = true;\n              if (!isInstanceCall && cancellable) {\n                value.$cancelRequest = noop;\n                $timeout.cancel(numericTimeoutPromise);\n                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;\n              }\n            });\n\n            promise = promise.then(\n              function(response) {\n                var value = responseInterceptor(response);\n                (success || noop)(value, response.headers, response.status, response.statusText);\n                return value;\n              },\n              responseErrorInterceptor);\n\n            if (!isInstanceCall) {\n              // we are creating instance / collection\n              // - set the initial promise\n              // - return the instance / collection\n              value.$promise = promise;\n              value.$resolved = false;\n              if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;\n\n              return value;\n            }\n\n            // instance call\n            return promise;\n          };\n\n\n          Resource.prototype['$' + name] = function(params, success, error) {\n            if (isFunction(params)) {\n              error = success; success = params; params = {};\n            }\n            var result = Resource[name].call(this, params, this, success, error);\n            return result.$promise || result;\n          };\n        });\n\n        Resource.bind = function(additionalParamDefaults) {\n          var extendedParamDefaults = extend({}, paramDefaults, additionalParamDefaults);\n          return resourceFactory(url, extendedParamDefaults, actions, options);\n        };\n\n        return Resource;\n      }\n\n      return resourceFactory;\n    }];\n  });\n\n\n})(window, window.angular);\n"]}